// DE0_nano_system_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.1 590

`timescale 1 ps / 1 ps
module DE0_nano_system_mm_interconnect_1 (
		input  wire        altpll_sys_c2_clk,                                             //                                           altpll_sys_c2.clk
		input  wire        clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset, // clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset.reset
		input  wire [11:0] clock_crossing_bridge_IO_m0_address,                           //                             clock_crossing_bridge_IO_m0.address
		output wire        clock_crossing_bridge_IO_m0_waitrequest,                       //                                                        .waitrequest
		input  wire [0:0]  clock_crossing_bridge_IO_m0_burstcount,                        //                                                        .burstcount
		input  wire [3:0]  clock_crossing_bridge_IO_m0_byteenable,                        //                                                        .byteenable
		input  wire        clock_crossing_bridge_IO_m0_read,                              //                                                        .read
		output wire [31:0] clock_crossing_bridge_IO_m0_readdata,                          //                                                        .readdata
		output wire        clock_crossing_bridge_IO_m0_readdatavalid,                     //                                                        .readdatavalid
		input  wire        clock_crossing_bridge_IO_m0_write,                             //                                                        .write
		input  wire [31:0] clock_crossing_bridge_IO_m0_writedata,                         //                                                        .writedata
		input  wire        clock_crossing_bridge_IO_m0_debugaccess,                       //                                                        .debugaccess
		output wire [2:0]  adc_spi_int_spi_control_port_address,                          //                            adc_spi_int_spi_control_port.address
		output wire        adc_spi_int_spi_control_port_write,                            //                                                        .write
		output wire        adc_spi_int_spi_control_port_read,                             //                                                        .read
		input  wire [15:0] adc_spi_int_spi_control_port_readdata,                         //                                                        .readdata
		output wire [15:0] adc_spi_int_spi_control_port_writedata,                        //                                                        .writedata
		output wire        adc_spi_int_spi_control_port_chipselect,                       //                                                        .chipselect
		output wire [8:0]  epcs_epcs_control_port_address,                                //                                  epcs_epcs_control_port.address
		output wire        epcs_epcs_control_port_write,                                  //                                                        .write
		output wire        epcs_epcs_control_port_read,                                   //                                                        .read
		input  wire [31:0] epcs_epcs_control_port_readdata,                               //                                                        .readdata
		output wire [31:0] epcs_epcs_control_port_writedata,                              //                                                        .writedata
		output wire        epcs_epcs_control_port_chipselect,                             //                                                        .chipselect
		output wire [1:0]  ext_sensor_int_s1_address,                                     //                                       ext_sensor_int_s1.address
		output wire        ext_sensor_int_s1_write,                                       //                                                        .write
		input  wire [31:0] ext_sensor_int_s1_readdata,                                    //                                                        .readdata
		output wire [31:0] ext_sensor_int_s1_writedata,                                   //                                                        .writedata
		output wire        ext_sensor_int_s1_chipselect,                                  //                                                        .chipselect
		output wire [1:0]  g_sensor_int_s1_address,                                       //                                         g_sensor_int_s1.address
		output wire        g_sensor_int_s1_write,                                         //                                                        .write
		input  wire [31:0] g_sensor_int_s1_readdata,                                      //                                                        .readdata
		output wire [31:0] g_sensor_int_s1_writedata,                                     //                                                        .writedata
		output wire        g_sensor_int_s1_chipselect,                                    //                                                        .chipselect
		output wire [1:0]  i2c_EXT_sda_s1_address,                                        //                                          i2c_EXT_sda_s1.address
		output wire        i2c_EXT_sda_s1_write,                                          //                                                        .write
		input  wire [31:0] i2c_EXT_sda_s1_readdata,                                       //                                                        .readdata
		output wire [31:0] i2c_EXT_sda_s1_writedata,                                      //                                                        .writedata
		output wire        i2c_EXT_sda_s1_chipselect,                                     //                                                        .chipselect
		output wire [1:0]  i2c_scl_s1_address,                                            //                                              i2c_scl_s1.address
		output wire        i2c_scl_s1_write,                                              //                                                        .write
		input  wire [31:0] i2c_scl_s1_readdata,                                           //                                                        .readdata
		output wire [31:0] i2c_scl_s1_writedata,                                          //                                                        .writedata
		output wire        i2c_scl_s1_chipselect,                                         //                                                        .chipselect
		output wire [1:0]  i2c_sda_s1_address,                                            //                                              i2c_sda_s1.address
		output wire        i2c_sda_s1_write,                                              //                                                        .write
		input  wire [31:0] i2c_sda_s1_readdata,                                           //                                                        .readdata
		output wire [31:0] i2c_sda_s1_writedata,                                          //                                                        .writedata
		output wire        i2c_sda_s1_chipselect,                                         //                                                        .chipselect
		output wire [1:0]  pio_key_s1_address,                                            //                                              pio_key_s1.address
		output wire        pio_key_s1_write,                                              //                                                        .write
		input  wire [31:0] pio_key_s1_readdata,                                           //                                                        .readdata
		output wire [31:0] pio_key_s1_writedata,                                          //                                                        .writedata
		output wire        pio_key_s1_chipselect,                                         //                                                        .chipselect
		output wire [1:0]  pio_leds_s1_address,                                           //                                             pio_leds_s1.address
		output wire        pio_leds_s1_write,                                             //                                                        .write
		input  wire [31:0] pio_leds_s1_readdata,                                          //                                                        .readdata
		output wire [31:0] pio_leds_s1_writedata,                                         //                                                        .writedata
		output wire        pio_leds_s1_chipselect,                                        //                                                        .chipselect
		output wire [1:0]  pio_switch_s1_address,                                         //                                           pio_switch_s1.address
		input  wire [31:0] pio_switch_s1_readdata,                                        //                                                        .readdata
		output wire [0:0]  sysid_qsys_control_slave_address,                              //                                sysid_qsys_control_slave.address
		input  wire [31:0] sysid_qsys_control_slave_readdata,                             //                                                        .readdata
		output wire [2:0]  timer_s1_address,                                              //                                                timer_s1.address
		output wire        timer_s1_write,                                                //                                                        .write
		input  wire [15:0] timer_s1_readdata,                                             //                                                        .readdata
		output wire [15:0] timer_s1_writedata,                                            //                                                        .writedata
		output wire        timer_s1_chipselect,                                           //                                                        .chipselect
		output wire [2:0]  xbee_uart_s1_address,                                          //                                            xbee_uart_s1.address
		output wire        xbee_uart_s1_write,                                            //                                                        .write
		output wire        xbee_uart_s1_read,                                             //                                                        .read
		input  wire [15:0] xbee_uart_s1_readdata,                                         //                                                        .readdata
		output wire [15:0] xbee_uart_s1_writedata,                                        //                                                        .writedata
		output wire        xbee_uart_s1_begintransfer,                                    //                                                        .begintransfer
		output wire        xbee_uart_s1_chipselect                                        //                                                        .chipselect
	);

	wire         clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_waitrequest;   // clock_crossing_bridge_IO_m0_agent:av_waitrequest -> clock_crossing_bridge_IO_m0_translator:uav_waitrequest
	wire  [31:0] clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_readdata;      // clock_crossing_bridge_IO_m0_agent:av_readdata -> clock_crossing_bridge_IO_m0_translator:uav_readdata
	wire         clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_debugaccess;   // clock_crossing_bridge_IO_m0_translator:uav_debugaccess -> clock_crossing_bridge_IO_m0_agent:av_debugaccess
	wire  [11:0] clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_address;       // clock_crossing_bridge_IO_m0_translator:uav_address -> clock_crossing_bridge_IO_m0_agent:av_address
	wire         clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_read;          // clock_crossing_bridge_IO_m0_translator:uav_read -> clock_crossing_bridge_IO_m0_agent:av_read
	wire   [3:0] clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_byteenable;    // clock_crossing_bridge_IO_m0_translator:uav_byteenable -> clock_crossing_bridge_IO_m0_agent:av_byteenable
	wire         clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_readdatavalid; // clock_crossing_bridge_IO_m0_agent:av_readdatavalid -> clock_crossing_bridge_IO_m0_translator:uav_readdatavalid
	wire         clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_lock;          // clock_crossing_bridge_IO_m0_translator:uav_lock -> clock_crossing_bridge_IO_m0_agent:av_lock
	wire         clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_write;         // clock_crossing_bridge_IO_m0_translator:uav_write -> clock_crossing_bridge_IO_m0_agent:av_write
	wire  [31:0] clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_writedata;     // clock_crossing_bridge_IO_m0_translator:uav_writedata -> clock_crossing_bridge_IO_m0_agent:av_writedata
	wire   [2:0] clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_burstcount;    // clock_crossing_bridge_IO_m0_translator:uav_burstcount -> clock_crossing_bridge_IO_m0_agent:av_burstcount
	wire  [31:0] sysid_qsys_control_slave_agent_m0_readdata;                                     // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_agent:m0_readdata
	wire         sysid_qsys_control_slave_agent_m0_waitrequest;                                  // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_agent:m0_waitrequest
	wire         sysid_qsys_control_slave_agent_m0_debugaccess;                                  // sysid_qsys_control_slave_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire  [11:0] sysid_qsys_control_slave_agent_m0_address;                                      // sysid_qsys_control_slave_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire   [3:0] sysid_qsys_control_slave_agent_m0_byteenable;                                   // sysid_qsys_control_slave_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire         sysid_qsys_control_slave_agent_m0_read;                                         // sysid_qsys_control_slave_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire         sysid_qsys_control_slave_agent_m0_readdatavalid;                                // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_agent:m0_readdatavalid
	wire         sysid_qsys_control_slave_agent_m0_lock;                                         // sysid_qsys_control_slave_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire  [31:0] sysid_qsys_control_slave_agent_m0_writedata;                                    // sysid_qsys_control_slave_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire         sysid_qsys_control_slave_agent_m0_write;                                        // sysid_qsys_control_slave_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire   [2:0] sysid_qsys_control_slave_agent_m0_burstcount;                                   // sysid_qsys_control_slave_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire         sysid_qsys_control_slave_agent_rf_source_valid;                                 // sysid_qsys_control_slave_agent:rf_source_valid -> sysid_qsys_control_slave_agent_rsp_fifo:in_valid
	wire  [88:0] sysid_qsys_control_slave_agent_rf_source_data;                                  // sysid_qsys_control_slave_agent:rf_source_data -> sysid_qsys_control_slave_agent_rsp_fifo:in_data
	wire         sysid_qsys_control_slave_agent_rf_source_ready;                                 // sysid_qsys_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_agent:rf_source_ready
	wire         sysid_qsys_control_slave_agent_rf_source_startofpacket;                         // sysid_qsys_control_slave_agent:rf_source_startofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_startofpacket
	wire         sysid_qsys_control_slave_agent_rf_source_endofpacket;                           // sysid_qsys_control_slave_agent:rf_source_endofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_endofpacket
	wire         sysid_qsys_control_slave_agent_rsp_fifo_out_valid;                              // sysid_qsys_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_agent:rf_sink_valid
	wire  [88:0] sysid_qsys_control_slave_agent_rsp_fifo_out_data;                               // sysid_qsys_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_agent:rf_sink_data
	wire         sysid_qsys_control_slave_agent_rsp_fifo_out_ready;                              // sysid_qsys_control_slave_agent:rf_sink_ready -> sysid_qsys_control_slave_agent_rsp_fifo:out_ready
	wire         sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket;                      // sysid_qsys_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_agent:rf_sink_startofpacket
	wire         sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket;                        // sysid_qsys_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                              // cmd_mux:src_valid -> sysid_qsys_control_slave_agent:cp_valid
	wire  [87:0] cmd_mux_src_data;                                                               // cmd_mux:src_data -> sysid_qsys_control_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                              // sysid_qsys_control_slave_agent:cp_ready -> cmd_mux:src_ready
	wire  [12:0] cmd_mux_src_channel;                                                            // cmd_mux:src_channel -> sysid_qsys_control_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                      // cmd_mux:src_startofpacket -> sysid_qsys_control_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                        // cmd_mux:src_endofpacket -> sysid_qsys_control_slave_agent:cp_endofpacket
	wire  [31:0] epcs_epcs_control_port_agent_m0_readdata;                                       // epcs_epcs_control_port_translator:uav_readdata -> epcs_epcs_control_port_agent:m0_readdata
	wire         epcs_epcs_control_port_agent_m0_waitrequest;                                    // epcs_epcs_control_port_translator:uav_waitrequest -> epcs_epcs_control_port_agent:m0_waitrequest
	wire         epcs_epcs_control_port_agent_m0_debugaccess;                                    // epcs_epcs_control_port_agent:m0_debugaccess -> epcs_epcs_control_port_translator:uav_debugaccess
	wire  [11:0] epcs_epcs_control_port_agent_m0_address;                                        // epcs_epcs_control_port_agent:m0_address -> epcs_epcs_control_port_translator:uav_address
	wire   [3:0] epcs_epcs_control_port_agent_m0_byteenable;                                     // epcs_epcs_control_port_agent:m0_byteenable -> epcs_epcs_control_port_translator:uav_byteenable
	wire         epcs_epcs_control_port_agent_m0_read;                                           // epcs_epcs_control_port_agent:m0_read -> epcs_epcs_control_port_translator:uav_read
	wire         epcs_epcs_control_port_agent_m0_readdatavalid;                                  // epcs_epcs_control_port_translator:uav_readdatavalid -> epcs_epcs_control_port_agent:m0_readdatavalid
	wire         epcs_epcs_control_port_agent_m0_lock;                                           // epcs_epcs_control_port_agent:m0_lock -> epcs_epcs_control_port_translator:uav_lock
	wire  [31:0] epcs_epcs_control_port_agent_m0_writedata;                                      // epcs_epcs_control_port_agent:m0_writedata -> epcs_epcs_control_port_translator:uav_writedata
	wire         epcs_epcs_control_port_agent_m0_write;                                          // epcs_epcs_control_port_agent:m0_write -> epcs_epcs_control_port_translator:uav_write
	wire   [2:0] epcs_epcs_control_port_agent_m0_burstcount;                                     // epcs_epcs_control_port_agent:m0_burstcount -> epcs_epcs_control_port_translator:uav_burstcount
	wire         epcs_epcs_control_port_agent_rf_source_valid;                                   // epcs_epcs_control_port_agent:rf_source_valid -> epcs_epcs_control_port_agent_rsp_fifo:in_valid
	wire  [88:0] epcs_epcs_control_port_agent_rf_source_data;                                    // epcs_epcs_control_port_agent:rf_source_data -> epcs_epcs_control_port_agent_rsp_fifo:in_data
	wire         epcs_epcs_control_port_agent_rf_source_ready;                                   // epcs_epcs_control_port_agent_rsp_fifo:in_ready -> epcs_epcs_control_port_agent:rf_source_ready
	wire         epcs_epcs_control_port_agent_rf_source_startofpacket;                           // epcs_epcs_control_port_agent:rf_source_startofpacket -> epcs_epcs_control_port_agent_rsp_fifo:in_startofpacket
	wire         epcs_epcs_control_port_agent_rf_source_endofpacket;                             // epcs_epcs_control_port_agent:rf_source_endofpacket -> epcs_epcs_control_port_agent_rsp_fifo:in_endofpacket
	wire         epcs_epcs_control_port_agent_rsp_fifo_out_valid;                                // epcs_epcs_control_port_agent_rsp_fifo:out_valid -> epcs_epcs_control_port_agent:rf_sink_valid
	wire  [88:0] epcs_epcs_control_port_agent_rsp_fifo_out_data;                                 // epcs_epcs_control_port_agent_rsp_fifo:out_data -> epcs_epcs_control_port_agent:rf_sink_data
	wire         epcs_epcs_control_port_agent_rsp_fifo_out_ready;                                // epcs_epcs_control_port_agent:rf_sink_ready -> epcs_epcs_control_port_agent_rsp_fifo:out_ready
	wire         epcs_epcs_control_port_agent_rsp_fifo_out_startofpacket;                        // epcs_epcs_control_port_agent_rsp_fifo:out_startofpacket -> epcs_epcs_control_port_agent:rf_sink_startofpacket
	wire         epcs_epcs_control_port_agent_rsp_fifo_out_endofpacket;                          // epcs_epcs_control_port_agent_rsp_fifo:out_endofpacket -> epcs_epcs_control_port_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                          // cmd_mux_001:src_valid -> epcs_epcs_control_port_agent:cp_valid
	wire  [87:0] cmd_mux_001_src_data;                                                           // cmd_mux_001:src_data -> epcs_epcs_control_port_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                          // epcs_epcs_control_port_agent:cp_ready -> cmd_mux_001:src_ready
	wire  [12:0] cmd_mux_001_src_channel;                                                        // cmd_mux_001:src_channel -> epcs_epcs_control_port_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                                  // cmd_mux_001:src_startofpacket -> epcs_epcs_control_port_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                    // cmd_mux_001:src_endofpacket -> epcs_epcs_control_port_agent:cp_endofpacket
	wire  [31:0] timer_s1_agent_m0_readdata;                                                     // timer_s1_translator:uav_readdata -> timer_s1_agent:m0_readdata
	wire         timer_s1_agent_m0_waitrequest;                                                  // timer_s1_translator:uav_waitrequest -> timer_s1_agent:m0_waitrequest
	wire         timer_s1_agent_m0_debugaccess;                                                  // timer_s1_agent:m0_debugaccess -> timer_s1_translator:uav_debugaccess
	wire  [11:0] timer_s1_agent_m0_address;                                                      // timer_s1_agent:m0_address -> timer_s1_translator:uav_address
	wire   [3:0] timer_s1_agent_m0_byteenable;                                                   // timer_s1_agent:m0_byteenable -> timer_s1_translator:uav_byteenable
	wire         timer_s1_agent_m0_read;                                                         // timer_s1_agent:m0_read -> timer_s1_translator:uav_read
	wire         timer_s1_agent_m0_readdatavalid;                                                // timer_s1_translator:uav_readdatavalid -> timer_s1_agent:m0_readdatavalid
	wire         timer_s1_agent_m0_lock;                                                         // timer_s1_agent:m0_lock -> timer_s1_translator:uav_lock
	wire  [31:0] timer_s1_agent_m0_writedata;                                                    // timer_s1_agent:m0_writedata -> timer_s1_translator:uav_writedata
	wire         timer_s1_agent_m0_write;                                                        // timer_s1_agent:m0_write -> timer_s1_translator:uav_write
	wire   [2:0] timer_s1_agent_m0_burstcount;                                                   // timer_s1_agent:m0_burstcount -> timer_s1_translator:uav_burstcount
	wire         timer_s1_agent_rf_source_valid;                                                 // timer_s1_agent:rf_source_valid -> timer_s1_agent_rsp_fifo:in_valid
	wire  [88:0] timer_s1_agent_rf_source_data;                                                  // timer_s1_agent:rf_source_data -> timer_s1_agent_rsp_fifo:in_data
	wire         timer_s1_agent_rf_source_ready;                                                 // timer_s1_agent_rsp_fifo:in_ready -> timer_s1_agent:rf_source_ready
	wire         timer_s1_agent_rf_source_startofpacket;                                         // timer_s1_agent:rf_source_startofpacket -> timer_s1_agent_rsp_fifo:in_startofpacket
	wire         timer_s1_agent_rf_source_endofpacket;                                           // timer_s1_agent:rf_source_endofpacket -> timer_s1_agent_rsp_fifo:in_endofpacket
	wire         timer_s1_agent_rsp_fifo_out_valid;                                              // timer_s1_agent_rsp_fifo:out_valid -> timer_s1_agent:rf_sink_valid
	wire  [88:0] timer_s1_agent_rsp_fifo_out_data;                                               // timer_s1_agent_rsp_fifo:out_data -> timer_s1_agent:rf_sink_data
	wire         timer_s1_agent_rsp_fifo_out_ready;                                              // timer_s1_agent:rf_sink_ready -> timer_s1_agent_rsp_fifo:out_ready
	wire         timer_s1_agent_rsp_fifo_out_startofpacket;                                      // timer_s1_agent_rsp_fifo:out_startofpacket -> timer_s1_agent:rf_sink_startofpacket
	wire         timer_s1_agent_rsp_fifo_out_endofpacket;                                        // timer_s1_agent_rsp_fifo:out_endofpacket -> timer_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                          // cmd_mux_002:src_valid -> timer_s1_agent:cp_valid
	wire  [87:0] cmd_mux_002_src_data;                                                           // cmd_mux_002:src_data -> timer_s1_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                          // timer_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire  [12:0] cmd_mux_002_src_channel;                                                        // cmd_mux_002:src_channel -> timer_s1_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                                  // cmd_mux_002:src_startofpacket -> timer_s1_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                    // cmd_mux_002:src_endofpacket -> timer_s1_agent:cp_endofpacket
	wire  [31:0] pio_leds_s1_agent_m0_readdata;                                                  // pio_leds_s1_translator:uav_readdata -> pio_leds_s1_agent:m0_readdata
	wire         pio_leds_s1_agent_m0_waitrequest;                                               // pio_leds_s1_translator:uav_waitrequest -> pio_leds_s1_agent:m0_waitrequest
	wire         pio_leds_s1_agent_m0_debugaccess;                                               // pio_leds_s1_agent:m0_debugaccess -> pio_leds_s1_translator:uav_debugaccess
	wire  [11:0] pio_leds_s1_agent_m0_address;                                                   // pio_leds_s1_agent:m0_address -> pio_leds_s1_translator:uav_address
	wire   [3:0] pio_leds_s1_agent_m0_byteenable;                                                // pio_leds_s1_agent:m0_byteenable -> pio_leds_s1_translator:uav_byteenable
	wire         pio_leds_s1_agent_m0_read;                                                      // pio_leds_s1_agent:m0_read -> pio_leds_s1_translator:uav_read
	wire         pio_leds_s1_agent_m0_readdatavalid;                                             // pio_leds_s1_translator:uav_readdatavalid -> pio_leds_s1_agent:m0_readdatavalid
	wire         pio_leds_s1_agent_m0_lock;                                                      // pio_leds_s1_agent:m0_lock -> pio_leds_s1_translator:uav_lock
	wire  [31:0] pio_leds_s1_agent_m0_writedata;                                                 // pio_leds_s1_agent:m0_writedata -> pio_leds_s1_translator:uav_writedata
	wire         pio_leds_s1_agent_m0_write;                                                     // pio_leds_s1_agent:m0_write -> pio_leds_s1_translator:uav_write
	wire   [2:0] pio_leds_s1_agent_m0_burstcount;                                                // pio_leds_s1_agent:m0_burstcount -> pio_leds_s1_translator:uav_burstcount
	wire         pio_leds_s1_agent_rf_source_valid;                                              // pio_leds_s1_agent:rf_source_valid -> pio_leds_s1_agent_rsp_fifo:in_valid
	wire  [88:0] pio_leds_s1_agent_rf_source_data;                                               // pio_leds_s1_agent:rf_source_data -> pio_leds_s1_agent_rsp_fifo:in_data
	wire         pio_leds_s1_agent_rf_source_ready;                                              // pio_leds_s1_agent_rsp_fifo:in_ready -> pio_leds_s1_agent:rf_source_ready
	wire         pio_leds_s1_agent_rf_source_startofpacket;                                      // pio_leds_s1_agent:rf_source_startofpacket -> pio_leds_s1_agent_rsp_fifo:in_startofpacket
	wire         pio_leds_s1_agent_rf_source_endofpacket;                                        // pio_leds_s1_agent:rf_source_endofpacket -> pio_leds_s1_agent_rsp_fifo:in_endofpacket
	wire         pio_leds_s1_agent_rsp_fifo_out_valid;                                           // pio_leds_s1_agent_rsp_fifo:out_valid -> pio_leds_s1_agent:rf_sink_valid
	wire  [88:0] pio_leds_s1_agent_rsp_fifo_out_data;                                            // pio_leds_s1_agent_rsp_fifo:out_data -> pio_leds_s1_agent:rf_sink_data
	wire         pio_leds_s1_agent_rsp_fifo_out_ready;                                           // pio_leds_s1_agent:rf_sink_ready -> pio_leds_s1_agent_rsp_fifo:out_ready
	wire         pio_leds_s1_agent_rsp_fifo_out_startofpacket;                                   // pio_leds_s1_agent_rsp_fifo:out_startofpacket -> pio_leds_s1_agent:rf_sink_startofpacket
	wire         pio_leds_s1_agent_rsp_fifo_out_endofpacket;                                     // pio_leds_s1_agent_rsp_fifo:out_endofpacket -> pio_leds_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                          // cmd_mux_003:src_valid -> pio_leds_s1_agent:cp_valid
	wire  [87:0] cmd_mux_003_src_data;                                                           // cmd_mux_003:src_data -> pio_leds_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                          // pio_leds_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire  [12:0] cmd_mux_003_src_channel;                                                        // cmd_mux_003:src_channel -> pio_leds_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                                  // cmd_mux_003:src_startofpacket -> pio_leds_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                                    // cmd_mux_003:src_endofpacket -> pio_leds_s1_agent:cp_endofpacket
	wire  [31:0] pio_key_s1_agent_m0_readdata;                                                   // pio_key_s1_translator:uav_readdata -> pio_key_s1_agent:m0_readdata
	wire         pio_key_s1_agent_m0_waitrequest;                                                // pio_key_s1_translator:uav_waitrequest -> pio_key_s1_agent:m0_waitrequest
	wire         pio_key_s1_agent_m0_debugaccess;                                                // pio_key_s1_agent:m0_debugaccess -> pio_key_s1_translator:uav_debugaccess
	wire  [11:0] pio_key_s1_agent_m0_address;                                                    // pio_key_s1_agent:m0_address -> pio_key_s1_translator:uav_address
	wire   [3:0] pio_key_s1_agent_m0_byteenable;                                                 // pio_key_s1_agent:m0_byteenable -> pio_key_s1_translator:uav_byteenable
	wire         pio_key_s1_agent_m0_read;                                                       // pio_key_s1_agent:m0_read -> pio_key_s1_translator:uav_read
	wire         pio_key_s1_agent_m0_readdatavalid;                                              // pio_key_s1_translator:uav_readdatavalid -> pio_key_s1_agent:m0_readdatavalid
	wire         pio_key_s1_agent_m0_lock;                                                       // pio_key_s1_agent:m0_lock -> pio_key_s1_translator:uav_lock
	wire  [31:0] pio_key_s1_agent_m0_writedata;                                                  // pio_key_s1_agent:m0_writedata -> pio_key_s1_translator:uav_writedata
	wire         pio_key_s1_agent_m0_write;                                                      // pio_key_s1_agent:m0_write -> pio_key_s1_translator:uav_write
	wire   [2:0] pio_key_s1_agent_m0_burstcount;                                                 // pio_key_s1_agent:m0_burstcount -> pio_key_s1_translator:uav_burstcount
	wire         pio_key_s1_agent_rf_source_valid;                                               // pio_key_s1_agent:rf_source_valid -> pio_key_s1_agent_rsp_fifo:in_valid
	wire  [88:0] pio_key_s1_agent_rf_source_data;                                                // pio_key_s1_agent:rf_source_data -> pio_key_s1_agent_rsp_fifo:in_data
	wire         pio_key_s1_agent_rf_source_ready;                                               // pio_key_s1_agent_rsp_fifo:in_ready -> pio_key_s1_agent:rf_source_ready
	wire         pio_key_s1_agent_rf_source_startofpacket;                                       // pio_key_s1_agent:rf_source_startofpacket -> pio_key_s1_agent_rsp_fifo:in_startofpacket
	wire         pio_key_s1_agent_rf_source_endofpacket;                                         // pio_key_s1_agent:rf_source_endofpacket -> pio_key_s1_agent_rsp_fifo:in_endofpacket
	wire         pio_key_s1_agent_rsp_fifo_out_valid;                                            // pio_key_s1_agent_rsp_fifo:out_valid -> pio_key_s1_agent:rf_sink_valid
	wire  [88:0] pio_key_s1_agent_rsp_fifo_out_data;                                             // pio_key_s1_agent_rsp_fifo:out_data -> pio_key_s1_agent:rf_sink_data
	wire         pio_key_s1_agent_rsp_fifo_out_ready;                                            // pio_key_s1_agent:rf_sink_ready -> pio_key_s1_agent_rsp_fifo:out_ready
	wire         pio_key_s1_agent_rsp_fifo_out_startofpacket;                                    // pio_key_s1_agent_rsp_fifo:out_startofpacket -> pio_key_s1_agent:rf_sink_startofpacket
	wire         pio_key_s1_agent_rsp_fifo_out_endofpacket;                                      // pio_key_s1_agent_rsp_fifo:out_endofpacket -> pio_key_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                                          // cmd_mux_004:src_valid -> pio_key_s1_agent:cp_valid
	wire  [87:0] cmd_mux_004_src_data;                                                           // cmd_mux_004:src_data -> pio_key_s1_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                          // pio_key_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire  [12:0] cmd_mux_004_src_channel;                                                        // cmd_mux_004:src_channel -> pio_key_s1_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                                  // cmd_mux_004:src_startofpacket -> pio_key_s1_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                                    // cmd_mux_004:src_endofpacket -> pio_key_s1_agent:cp_endofpacket
	wire  [31:0] pio_switch_s1_agent_m0_readdata;                                                // pio_switch_s1_translator:uav_readdata -> pio_switch_s1_agent:m0_readdata
	wire         pio_switch_s1_agent_m0_waitrequest;                                             // pio_switch_s1_translator:uav_waitrequest -> pio_switch_s1_agent:m0_waitrequest
	wire         pio_switch_s1_agent_m0_debugaccess;                                             // pio_switch_s1_agent:m0_debugaccess -> pio_switch_s1_translator:uav_debugaccess
	wire  [11:0] pio_switch_s1_agent_m0_address;                                                 // pio_switch_s1_agent:m0_address -> pio_switch_s1_translator:uav_address
	wire   [3:0] pio_switch_s1_agent_m0_byteenable;                                              // pio_switch_s1_agent:m0_byteenable -> pio_switch_s1_translator:uav_byteenable
	wire         pio_switch_s1_agent_m0_read;                                                    // pio_switch_s1_agent:m0_read -> pio_switch_s1_translator:uav_read
	wire         pio_switch_s1_agent_m0_readdatavalid;                                           // pio_switch_s1_translator:uav_readdatavalid -> pio_switch_s1_agent:m0_readdatavalid
	wire         pio_switch_s1_agent_m0_lock;                                                    // pio_switch_s1_agent:m0_lock -> pio_switch_s1_translator:uav_lock
	wire  [31:0] pio_switch_s1_agent_m0_writedata;                                               // pio_switch_s1_agent:m0_writedata -> pio_switch_s1_translator:uav_writedata
	wire         pio_switch_s1_agent_m0_write;                                                   // pio_switch_s1_agent:m0_write -> pio_switch_s1_translator:uav_write
	wire   [2:0] pio_switch_s1_agent_m0_burstcount;                                              // pio_switch_s1_agent:m0_burstcount -> pio_switch_s1_translator:uav_burstcount
	wire         pio_switch_s1_agent_rf_source_valid;                                            // pio_switch_s1_agent:rf_source_valid -> pio_switch_s1_agent_rsp_fifo:in_valid
	wire  [88:0] pio_switch_s1_agent_rf_source_data;                                             // pio_switch_s1_agent:rf_source_data -> pio_switch_s1_agent_rsp_fifo:in_data
	wire         pio_switch_s1_agent_rf_source_ready;                                            // pio_switch_s1_agent_rsp_fifo:in_ready -> pio_switch_s1_agent:rf_source_ready
	wire         pio_switch_s1_agent_rf_source_startofpacket;                                    // pio_switch_s1_agent:rf_source_startofpacket -> pio_switch_s1_agent_rsp_fifo:in_startofpacket
	wire         pio_switch_s1_agent_rf_source_endofpacket;                                      // pio_switch_s1_agent:rf_source_endofpacket -> pio_switch_s1_agent_rsp_fifo:in_endofpacket
	wire         pio_switch_s1_agent_rsp_fifo_out_valid;                                         // pio_switch_s1_agent_rsp_fifo:out_valid -> pio_switch_s1_agent:rf_sink_valid
	wire  [88:0] pio_switch_s1_agent_rsp_fifo_out_data;                                          // pio_switch_s1_agent_rsp_fifo:out_data -> pio_switch_s1_agent:rf_sink_data
	wire         pio_switch_s1_agent_rsp_fifo_out_ready;                                         // pio_switch_s1_agent:rf_sink_ready -> pio_switch_s1_agent_rsp_fifo:out_ready
	wire         pio_switch_s1_agent_rsp_fifo_out_startofpacket;                                 // pio_switch_s1_agent_rsp_fifo:out_startofpacket -> pio_switch_s1_agent:rf_sink_startofpacket
	wire         pio_switch_s1_agent_rsp_fifo_out_endofpacket;                                   // pio_switch_s1_agent_rsp_fifo:out_endofpacket -> pio_switch_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                                          // cmd_mux_005:src_valid -> pio_switch_s1_agent:cp_valid
	wire  [87:0] cmd_mux_005_src_data;                                                           // cmd_mux_005:src_data -> pio_switch_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                          // pio_switch_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire  [12:0] cmd_mux_005_src_channel;                                                        // cmd_mux_005:src_channel -> pio_switch_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                                  // cmd_mux_005:src_startofpacket -> pio_switch_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                                    // cmd_mux_005:src_endofpacket -> pio_switch_s1_agent:cp_endofpacket
	wire  [31:0] g_sensor_int_s1_agent_m0_readdata;                                              // g_sensor_int_s1_translator:uav_readdata -> g_sensor_int_s1_agent:m0_readdata
	wire         g_sensor_int_s1_agent_m0_waitrequest;                                           // g_sensor_int_s1_translator:uav_waitrequest -> g_sensor_int_s1_agent:m0_waitrequest
	wire         g_sensor_int_s1_agent_m0_debugaccess;                                           // g_sensor_int_s1_agent:m0_debugaccess -> g_sensor_int_s1_translator:uav_debugaccess
	wire  [11:0] g_sensor_int_s1_agent_m0_address;                                               // g_sensor_int_s1_agent:m0_address -> g_sensor_int_s1_translator:uav_address
	wire   [3:0] g_sensor_int_s1_agent_m0_byteenable;                                            // g_sensor_int_s1_agent:m0_byteenable -> g_sensor_int_s1_translator:uav_byteenable
	wire         g_sensor_int_s1_agent_m0_read;                                                  // g_sensor_int_s1_agent:m0_read -> g_sensor_int_s1_translator:uav_read
	wire         g_sensor_int_s1_agent_m0_readdatavalid;                                         // g_sensor_int_s1_translator:uav_readdatavalid -> g_sensor_int_s1_agent:m0_readdatavalid
	wire         g_sensor_int_s1_agent_m0_lock;                                                  // g_sensor_int_s1_agent:m0_lock -> g_sensor_int_s1_translator:uav_lock
	wire  [31:0] g_sensor_int_s1_agent_m0_writedata;                                             // g_sensor_int_s1_agent:m0_writedata -> g_sensor_int_s1_translator:uav_writedata
	wire         g_sensor_int_s1_agent_m0_write;                                                 // g_sensor_int_s1_agent:m0_write -> g_sensor_int_s1_translator:uav_write
	wire   [2:0] g_sensor_int_s1_agent_m0_burstcount;                                            // g_sensor_int_s1_agent:m0_burstcount -> g_sensor_int_s1_translator:uav_burstcount
	wire         g_sensor_int_s1_agent_rf_source_valid;                                          // g_sensor_int_s1_agent:rf_source_valid -> g_sensor_int_s1_agent_rsp_fifo:in_valid
	wire  [88:0] g_sensor_int_s1_agent_rf_source_data;                                           // g_sensor_int_s1_agent:rf_source_data -> g_sensor_int_s1_agent_rsp_fifo:in_data
	wire         g_sensor_int_s1_agent_rf_source_ready;                                          // g_sensor_int_s1_agent_rsp_fifo:in_ready -> g_sensor_int_s1_agent:rf_source_ready
	wire         g_sensor_int_s1_agent_rf_source_startofpacket;                                  // g_sensor_int_s1_agent:rf_source_startofpacket -> g_sensor_int_s1_agent_rsp_fifo:in_startofpacket
	wire         g_sensor_int_s1_agent_rf_source_endofpacket;                                    // g_sensor_int_s1_agent:rf_source_endofpacket -> g_sensor_int_s1_agent_rsp_fifo:in_endofpacket
	wire         g_sensor_int_s1_agent_rsp_fifo_out_valid;                                       // g_sensor_int_s1_agent_rsp_fifo:out_valid -> g_sensor_int_s1_agent:rf_sink_valid
	wire  [88:0] g_sensor_int_s1_agent_rsp_fifo_out_data;                                        // g_sensor_int_s1_agent_rsp_fifo:out_data -> g_sensor_int_s1_agent:rf_sink_data
	wire         g_sensor_int_s1_agent_rsp_fifo_out_ready;                                       // g_sensor_int_s1_agent:rf_sink_ready -> g_sensor_int_s1_agent_rsp_fifo:out_ready
	wire         g_sensor_int_s1_agent_rsp_fifo_out_startofpacket;                               // g_sensor_int_s1_agent_rsp_fifo:out_startofpacket -> g_sensor_int_s1_agent:rf_sink_startofpacket
	wire         g_sensor_int_s1_agent_rsp_fifo_out_endofpacket;                                 // g_sensor_int_s1_agent_rsp_fifo:out_endofpacket -> g_sensor_int_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_006_src_valid;                                                          // cmd_mux_006:src_valid -> g_sensor_int_s1_agent:cp_valid
	wire  [87:0] cmd_mux_006_src_data;                                                           // cmd_mux_006:src_data -> g_sensor_int_s1_agent:cp_data
	wire         cmd_mux_006_src_ready;                                                          // g_sensor_int_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire  [12:0] cmd_mux_006_src_channel;                                                        // cmd_mux_006:src_channel -> g_sensor_int_s1_agent:cp_channel
	wire         cmd_mux_006_src_startofpacket;                                                  // cmd_mux_006:src_startofpacket -> g_sensor_int_s1_agent:cp_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                                    // cmd_mux_006:src_endofpacket -> g_sensor_int_s1_agent:cp_endofpacket
	wire  [31:0] i2c_sda_s1_agent_m0_readdata;                                                   // i2c_sda_s1_translator:uav_readdata -> i2c_sda_s1_agent:m0_readdata
	wire         i2c_sda_s1_agent_m0_waitrequest;                                                // i2c_sda_s1_translator:uav_waitrequest -> i2c_sda_s1_agent:m0_waitrequest
	wire         i2c_sda_s1_agent_m0_debugaccess;                                                // i2c_sda_s1_agent:m0_debugaccess -> i2c_sda_s1_translator:uav_debugaccess
	wire  [11:0] i2c_sda_s1_agent_m0_address;                                                    // i2c_sda_s1_agent:m0_address -> i2c_sda_s1_translator:uav_address
	wire   [3:0] i2c_sda_s1_agent_m0_byteenable;                                                 // i2c_sda_s1_agent:m0_byteenable -> i2c_sda_s1_translator:uav_byteenable
	wire         i2c_sda_s1_agent_m0_read;                                                       // i2c_sda_s1_agent:m0_read -> i2c_sda_s1_translator:uav_read
	wire         i2c_sda_s1_agent_m0_readdatavalid;                                              // i2c_sda_s1_translator:uav_readdatavalid -> i2c_sda_s1_agent:m0_readdatavalid
	wire         i2c_sda_s1_agent_m0_lock;                                                       // i2c_sda_s1_agent:m0_lock -> i2c_sda_s1_translator:uav_lock
	wire  [31:0] i2c_sda_s1_agent_m0_writedata;                                                  // i2c_sda_s1_agent:m0_writedata -> i2c_sda_s1_translator:uav_writedata
	wire         i2c_sda_s1_agent_m0_write;                                                      // i2c_sda_s1_agent:m0_write -> i2c_sda_s1_translator:uav_write
	wire   [2:0] i2c_sda_s1_agent_m0_burstcount;                                                 // i2c_sda_s1_agent:m0_burstcount -> i2c_sda_s1_translator:uav_burstcount
	wire         i2c_sda_s1_agent_rf_source_valid;                                               // i2c_sda_s1_agent:rf_source_valid -> i2c_sda_s1_agent_rsp_fifo:in_valid
	wire  [88:0] i2c_sda_s1_agent_rf_source_data;                                                // i2c_sda_s1_agent:rf_source_data -> i2c_sda_s1_agent_rsp_fifo:in_data
	wire         i2c_sda_s1_agent_rf_source_ready;                                               // i2c_sda_s1_agent_rsp_fifo:in_ready -> i2c_sda_s1_agent:rf_source_ready
	wire         i2c_sda_s1_agent_rf_source_startofpacket;                                       // i2c_sda_s1_agent:rf_source_startofpacket -> i2c_sda_s1_agent_rsp_fifo:in_startofpacket
	wire         i2c_sda_s1_agent_rf_source_endofpacket;                                         // i2c_sda_s1_agent:rf_source_endofpacket -> i2c_sda_s1_agent_rsp_fifo:in_endofpacket
	wire         i2c_sda_s1_agent_rsp_fifo_out_valid;                                            // i2c_sda_s1_agent_rsp_fifo:out_valid -> i2c_sda_s1_agent:rf_sink_valid
	wire  [88:0] i2c_sda_s1_agent_rsp_fifo_out_data;                                             // i2c_sda_s1_agent_rsp_fifo:out_data -> i2c_sda_s1_agent:rf_sink_data
	wire         i2c_sda_s1_agent_rsp_fifo_out_ready;                                            // i2c_sda_s1_agent:rf_sink_ready -> i2c_sda_s1_agent_rsp_fifo:out_ready
	wire         i2c_sda_s1_agent_rsp_fifo_out_startofpacket;                                    // i2c_sda_s1_agent_rsp_fifo:out_startofpacket -> i2c_sda_s1_agent:rf_sink_startofpacket
	wire         i2c_sda_s1_agent_rsp_fifo_out_endofpacket;                                      // i2c_sda_s1_agent_rsp_fifo:out_endofpacket -> i2c_sda_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_007_src_valid;                                                          // cmd_mux_007:src_valid -> i2c_sda_s1_agent:cp_valid
	wire  [87:0] cmd_mux_007_src_data;                                                           // cmd_mux_007:src_data -> i2c_sda_s1_agent:cp_data
	wire         cmd_mux_007_src_ready;                                                          // i2c_sda_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire  [12:0] cmd_mux_007_src_channel;                                                        // cmd_mux_007:src_channel -> i2c_sda_s1_agent:cp_channel
	wire         cmd_mux_007_src_startofpacket;                                                  // cmd_mux_007:src_startofpacket -> i2c_sda_s1_agent:cp_startofpacket
	wire         cmd_mux_007_src_endofpacket;                                                    // cmd_mux_007:src_endofpacket -> i2c_sda_s1_agent:cp_endofpacket
	wire  [31:0] i2c_scl_s1_agent_m0_readdata;                                                   // i2c_scl_s1_translator:uav_readdata -> i2c_scl_s1_agent:m0_readdata
	wire         i2c_scl_s1_agent_m0_waitrequest;                                                // i2c_scl_s1_translator:uav_waitrequest -> i2c_scl_s1_agent:m0_waitrequest
	wire         i2c_scl_s1_agent_m0_debugaccess;                                                // i2c_scl_s1_agent:m0_debugaccess -> i2c_scl_s1_translator:uav_debugaccess
	wire  [11:0] i2c_scl_s1_agent_m0_address;                                                    // i2c_scl_s1_agent:m0_address -> i2c_scl_s1_translator:uav_address
	wire   [3:0] i2c_scl_s1_agent_m0_byteenable;                                                 // i2c_scl_s1_agent:m0_byteenable -> i2c_scl_s1_translator:uav_byteenable
	wire         i2c_scl_s1_agent_m0_read;                                                       // i2c_scl_s1_agent:m0_read -> i2c_scl_s1_translator:uav_read
	wire         i2c_scl_s1_agent_m0_readdatavalid;                                              // i2c_scl_s1_translator:uav_readdatavalid -> i2c_scl_s1_agent:m0_readdatavalid
	wire         i2c_scl_s1_agent_m0_lock;                                                       // i2c_scl_s1_agent:m0_lock -> i2c_scl_s1_translator:uav_lock
	wire  [31:0] i2c_scl_s1_agent_m0_writedata;                                                  // i2c_scl_s1_agent:m0_writedata -> i2c_scl_s1_translator:uav_writedata
	wire         i2c_scl_s1_agent_m0_write;                                                      // i2c_scl_s1_agent:m0_write -> i2c_scl_s1_translator:uav_write
	wire   [2:0] i2c_scl_s1_agent_m0_burstcount;                                                 // i2c_scl_s1_agent:m0_burstcount -> i2c_scl_s1_translator:uav_burstcount
	wire         i2c_scl_s1_agent_rf_source_valid;                                               // i2c_scl_s1_agent:rf_source_valid -> i2c_scl_s1_agent_rsp_fifo:in_valid
	wire  [88:0] i2c_scl_s1_agent_rf_source_data;                                                // i2c_scl_s1_agent:rf_source_data -> i2c_scl_s1_agent_rsp_fifo:in_data
	wire         i2c_scl_s1_agent_rf_source_ready;                                               // i2c_scl_s1_agent_rsp_fifo:in_ready -> i2c_scl_s1_agent:rf_source_ready
	wire         i2c_scl_s1_agent_rf_source_startofpacket;                                       // i2c_scl_s1_agent:rf_source_startofpacket -> i2c_scl_s1_agent_rsp_fifo:in_startofpacket
	wire         i2c_scl_s1_agent_rf_source_endofpacket;                                         // i2c_scl_s1_agent:rf_source_endofpacket -> i2c_scl_s1_agent_rsp_fifo:in_endofpacket
	wire         i2c_scl_s1_agent_rsp_fifo_out_valid;                                            // i2c_scl_s1_agent_rsp_fifo:out_valid -> i2c_scl_s1_agent:rf_sink_valid
	wire  [88:0] i2c_scl_s1_agent_rsp_fifo_out_data;                                             // i2c_scl_s1_agent_rsp_fifo:out_data -> i2c_scl_s1_agent:rf_sink_data
	wire         i2c_scl_s1_agent_rsp_fifo_out_ready;                                            // i2c_scl_s1_agent:rf_sink_ready -> i2c_scl_s1_agent_rsp_fifo:out_ready
	wire         i2c_scl_s1_agent_rsp_fifo_out_startofpacket;                                    // i2c_scl_s1_agent_rsp_fifo:out_startofpacket -> i2c_scl_s1_agent:rf_sink_startofpacket
	wire         i2c_scl_s1_agent_rsp_fifo_out_endofpacket;                                      // i2c_scl_s1_agent_rsp_fifo:out_endofpacket -> i2c_scl_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_008_src_valid;                                                          // cmd_mux_008:src_valid -> i2c_scl_s1_agent:cp_valid
	wire  [87:0] cmd_mux_008_src_data;                                                           // cmd_mux_008:src_data -> i2c_scl_s1_agent:cp_data
	wire         cmd_mux_008_src_ready;                                                          // i2c_scl_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire  [12:0] cmd_mux_008_src_channel;                                                        // cmd_mux_008:src_channel -> i2c_scl_s1_agent:cp_channel
	wire         cmd_mux_008_src_startofpacket;                                                  // cmd_mux_008:src_startofpacket -> i2c_scl_s1_agent:cp_startofpacket
	wire         cmd_mux_008_src_endofpacket;                                                    // cmd_mux_008:src_endofpacket -> i2c_scl_s1_agent:cp_endofpacket
	wire  [31:0] ext_sensor_int_s1_agent_m0_readdata;                                            // ext_sensor_int_s1_translator:uav_readdata -> ext_sensor_int_s1_agent:m0_readdata
	wire         ext_sensor_int_s1_agent_m0_waitrequest;                                         // ext_sensor_int_s1_translator:uav_waitrequest -> ext_sensor_int_s1_agent:m0_waitrequest
	wire         ext_sensor_int_s1_agent_m0_debugaccess;                                         // ext_sensor_int_s1_agent:m0_debugaccess -> ext_sensor_int_s1_translator:uav_debugaccess
	wire  [11:0] ext_sensor_int_s1_agent_m0_address;                                             // ext_sensor_int_s1_agent:m0_address -> ext_sensor_int_s1_translator:uav_address
	wire   [3:0] ext_sensor_int_s1_agent_m0_byteenable;                                          // ext_sensor_int_s1_agent:m0_byteenable -> ext_sensor_int_s1_translator:uav_byteenable
	wire         ext_sensor_int_s1_agent_m0_read;                                                // ext_sensor_int_s1_agent:m0_read -> ext_sensor_int_s1_translator:uav_read
	wire         ext_sensor_int_s1_agent_m0_readdatavalid;                                       // ext_sensor_int_s1_translator:uav_readdatavalid -> ext_sensor_int_s1_agent:m0_readdatavalid
	wire         ext_sensor_int_s1_agent_m0_lock;                                                // ext_sensor_int_s1_agent:m0_lock -> ext_sensor_int_s1_translator:uav_lock
	wire  [31:0] ext_sensor_int_s1_agent_m0_writedata;                                           // ext_sensor_int_s1_agent:m0_writedata -> ext_sensor_int_s1_translator:uav_writedata
	wire         ext_sensor_int_s1_agent_m0_write;                                               // ext_sensor_int_s1_agent:m0_write -> ext_sensor_int_s1_translator:uav_write
	wire   [2:0] ext_sensor_int_s1_agent_m0_burstcount;                                          // ext_sensor_int_s1_agent:m0_burstcount -> ext_sensor_int_s1_translator:uav_burstcount
	wire         ext_sensor_int_s1_agent_rf_source_valid;                                        // ext_sensor_int_s1_agent:rf_source_valid -> ext_sensor_int_s1_agent_rsp_fifo:in_valid
	wire  [88:0] ext_sensor_int_s1_agent_rf_source_data;                                         // ext_sensor_int_s1_agent:rf_source_data -> ext_sensor_int_s1_agent_rsp_fifo:in_data
	wire         ext_sensor_int_s1_agent_rf_source_ready;                                        // ext_sensor_int_s1_agent_rsp_fifo:in_ready -> ext_sensor_int_s1_agent:rf_source_ready
	wire         ext_sensor_int_s1_agent_rf_source_startofpacket;                                // ext_sensor_int_s1_agent:rf_source_startofpacket -> ext_sensor_int_s1_agent_rsp_fifo:in_startofpacket
	wire         ext_sensor_int_s1_agent_rf_source_endofpacket;                                  // ext_sensor_int_s1_agent:rf_source_endofpacket -> ext_sensor_int_s1_agent_rsp_fifo:in_endofpacket
	wire         ext_sensor_int_s1_agent_rsp_fifo_out_valid;                                     // ext_sensor_int_s1_agent_rsp_fifo:out_valid -> ext_sensor_int_s1_agent:rf_sink_valid
	wire  [88:0] ext_sensor_int_s1_agent_rsp_fifo_out_data;                                      // ext_sensor_int_s1_agent_rsp_fifo:out_data -> ext_sensor_int_s1_agent:rf_sink_data
	wire         ext_sensor_int_s1_agent_rsp_fifo_out_ready;                                     // ext_sensor_int_s1_agent:rf_sink_ready -> ext_sensor_int_s1_agent_rsp_fifo:out_ready
	wire         ext_sensor_int_s1_agent_rsp_fifo_out_startofpacket;                             // ext_sensor_int_s1_agent_rsp_fifo:out_startofpacket -> ext_sensor_int_s1_agent:rf_sink_startofpacket
	wire         ext_sensor_int_s1_agent_rsp_fifo_out_endofpacket;                               // ext_sensor_int_s1_agent_rsp_fifo:out_endofpacket -> ext_sensor_int_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_009_src_valid;                                                          // cmd_mux_009:src_valid -> ext_sensor_int_s1_agent:cp_valid
	wire  [87:0] cmd_mux_009_src_data;                                                           // cmd_mux_009:src_data -> ext_sensor_int_s1_agent:cp_data
	wire         cmd_mux_009_src_ready;                                                          // ext_sensor_int_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire  [12:0] cmd_mux_009_src_channel;                                                        // cmd_mux_009:src_channel -> ext_sensor_int_s1_agent:cp_channel
	wire         cmd_mux_009_src_startofpacket;                                                  // cmd_mux_009:src_startofpacket -> ext_sensor_int_s1_agent:cp_startofpacket
	wire         cmd_mux_009_src_endofpacket;                                                    // cmd_mux_009:src_endofpacket -> ext_sensor_int_s1_agent:cp_endofpacket
	wire  [31:0] i2c_ext_sda_s1_agent_m0_readdata;                                               // i2c_EXT_sda_s1_translator:uav_readdata -> i2c_EXT_sda_s1_agent:m0_readdata
	wire         i2c_ext_sda_s1_agent_m0_waitrequest;                                            // i2c_EXT_sda_s1_translator:uav_waitrequest -> i2c_EXT_sda_s1_agent:m0_waitrequest
	wire         i2c_ext_sda_s1_agent_m0_debugaccess;                                            // i2c_EXT_sda_s1_agent:m0_debugaccess -> i2c_EXT_sda_s1_translator:uav_debugaccess
	wire  [11:0] i2c_ext_sda_s1_agent_m0_address;                                                // i2c_EXT_sda_s1_agent:m0_address -> i2c_EXT_sda_s1_translator:uav_address
	wire   [3:0] i2c_ext_sda_s1_agent_m0_byteenable;                                             // i2c_EXT_sda_s1_agent:m0_byteenable -> i2c_EXT_sda_s1_translator:uav_byteenable
	wire         i2c_ext_sda_s1_agent_m0_read;                                                   // i2c_EXT_sda_s1_agent:m0_read -> i2c_EXT_sda_s1_translator:uav_read
	wire         i2c_ext_sda_s1_agent_m0_readdatavalid;                                          // i2c_EXT_sda_s1_translator:uav_readdatavalid -> i2c_EXT_sda_s1_agent:m0_readdatavalid
	wire         i2c_ext_sda_s1_agent_m0_lock;                                                   // i2c_EXT_sda_s1_agent:m0_lock -> i2c_EXT_sda_s1_translator:uav_lock
	wire  [31:0] i2c_ext_sda_s1_agent_m0_writedata;                                              // i2c_EXT_sda_s1_agent:m0_writedata -> i2c_EXT_sda_s1_translator:uav_writedata
	wire         i2c_ext_sda_s1_agent_m0_write;                                                  // i2c_EXT_sda_s1_agent:m0_write -> i2c_EXT_sda_s1_translator:uav_write
	wire   [2:0] i2c_ext_sda_s1_agent_m0_burstcount;                                             // i2c_EXT_sda_s1_agent:m0_burstcount -> i2c_EXT_sda_s1_translator:uav_burstcount
	wire         i2c_ext_sda_s1_agent_rf_source_valid;                                           // i2c_EXT_sda_s1_agent:rf_source_valid -> i2c_EXT_sda_s1_agent_rsp_fifo:in_valid
	wire  [88:0] i2c_ext_sda_s1_agent_rf_source_data;                                            // i2c_EXT_sda_s1_agent:rf_source_data -> i2c_EXT_sda_s1_agent_rsp_fifo:in_data
	wire         i2c_ext_sda_s1_agent_rf_source_ready;                                           // i2c_EXT_sda_s1_agent_rsp_fifo:in_ready -> i2c_EXT_sda_s1_agent:rf_source_ready
	wire         i2c_ext_sda_s1_agent_rf_source_startofpacket;                                   // i2c_EXT_sda_s1_agent:rf_source_startofpacket -> i2c_EXT_sda_s1_agent_rsp_fifo:in_startofpacket
	wire         i2c_ext_sda_s1_agent_rf_source_endofpacket;                                     // i2c_EXT_sda_s1_agent:rf_source_endofpacket -> i2c_EXT_sda_s1_agent_rsp_fifo:in_endofpacket
	wire         i2c_ext_sda_s1_agent_rsp_fifo_out_valid;                                        // i2c_EXT_sda_s1_agent_rsp_fifo:out_valid -> i2c_EXT_sda_s1_agent:rf_sink_valid
	wire  [88:0] i2c_ext_sda_s1_agent_rsp_fifo_out_data;                                         // i2c_EXT_sda_s1_agent_rsp_fifo:out_data -> i2c_EXT_sda_s1_agent:rf_sink_data
	wire         i2c_ext_sda_s1_agent_rsp_fifo_out_ready;                                        // i2c_EXT_sda_s1_agent:rf_sink_ready -> i2c_EXT_sda_s1_agent_rsp_fifo:out_ready
	wire         i2c_ext_sda_s1_agent_rsp_fifo_out_startofpacket;                                // i2c_EXT_sda_s1_agent_rsp_fifo:out_startofpacket -> i2c_EXT_sda_s1_agent:rf_sink_startofpacket
	wire         i2c_ext_sda_s1_agent_rsp_fifo_out_endofpacket;                                  // i2c_EXT_sda_s1_agent_rsp_fifo:out_endofpacket -> i2c_EXT_sda_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_010_src_valid;                                                          // cmd_mux_010:src_valid -> i2c_EXT_sda_s1_agent:cp_valid
	wire  [87:0] cmd_mux_010_src_data;                                                           // cmd_mux_010:src_data -> i2c_EXT_sda_s1_agent:cp_data
	wire         cmd_mux_010_src_ready;                                                          // i2c_EXT_sda_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire  [12:0] cmd_mux_010_src_channel;                                                        // cmd_mux_010:src_channel -> i2c_EXT_sda_s1_agent:cp_channel
	wire         cmd_mux_010_src_startofpacket;                                                  // cmd_mux_010:src_startofpacket -> i2c_EXT_sda_s1_agent:cp_startofpacket
	wire         cmd_mux_010_src_endofpacket;                                                    // cmd_mux_010:src_endofpacket -> i2c_EXT_sda_s1_agent:cp_endofpacket
	wire  [31:0] xbee_uart_s1_agent_m0_readdata;                                                 // xbee_uart_s1_translator:uav_readdata -> xbee_uart_s1_agent:m0_readdata
	wire         xbee_uart_s1_agent_m0_waitrequest;                                              // xbee_uart_s1_translator:uav_waitrequest -> xbee_uart_s1_agent:m0_waitrequest
	wire         xbee_uart_s1_agent_m0_debugaccess;                                              // xbee_uart_s1_agent:m0_debugaccess -> xbee_uart_s1_translator:uav_debugaccess
	wire  [11:0] xbee_uart_s1_agent_m0_address;                                                  // xbee_uart_s1_agent:m0_address -> xbee_uart_s1_translator:uav_address
	wire   [3:0] xbee_uart_s1_agent_m0_byteenable;                                               // xbee_uart_s1_agent:m0_byteenable -> xbee_uart_s1_translator:uav_byteenable
	wire         xbee_uart_s1_agent_m0_read;                                                     // xbee_uart_s1_agent:m0_read -> xbee_uart_s1_translator:uav_read
	wire         xbee_uart_s1_agent_m0_readdatavalid;                                            // xbee_uart_s1_translator:uav_readdatavalid -> xbee_uart_s1_agent:m0_readdatavalid
	wire         xbee_uart_s1_agent_m0_lock;                                                     // xbee_uart_s1_agent:m0_lock -> xbee_uart_s1_translator:uav_lock
	wire  [31:0] xbee_uart_s1_agent_m0_writedata;                                                // xbee_uart_s1_agent:m0_writedata -> xbee_uart_s1_translator:uav_writedata
	wire         xbee_uart_s1_agent_m0_write;                                                    // xbee_uart_s1_agent:m0_write -> xbee_uart_s1_translator:uav_write
	wire   [2:0] xbee_uart_s1_agent_m0_burstcount;                                               // xbee_uart_s1_agent:m0_burstcount -> xbee_uart_s1_translator:uav_burstcount
	wire         xbee_uart_s1_agent_rf_source_valid;                                             // xbee_uart_s1_agent:rf_source_valid -> xbee_uart_s1_agent_rsp_fifo:in_valid
	wire  [88:0] xbee_uart_s1_agent_rf_source_data;                                              // xbee_uart_s1_agent:rf_source_data -> xbee_uart_s1_agent_rsp_fifo:in_data
	wire         xbee_uart_s1_agent_rf_source_ready;                                             // xbee_uart_s1_agent_rsp_fifo:in_ready -> xbee_uart_s1_agent:rf_source_ready
	wire         xbee_uart_s1_agent_rf_source_startofpacket;                                     // xbee_uart_s1_agent:rf_source_startofpacket -> xbee_uart_s1_agent_rsp_fifo:in_startofpacket
	wire         xbee_uart_s1_agent_rf_source_endofpacket;                                       // xbee_uart_s1_agent:rf_source_endofpacket -> xbee_uart_s1_agent_rsp_fifo:in_endofpacket
	wire         xbee_uart_s1_agent_rsp_fifo_out_valid;                                          // xbee_uart_s1_agent_rsp_fifo:out_valid -> xbee_uart_s1_agent:rf_sink_valid
	wire  [88:0] xbee_uart_s1_agent_rsp_fifo_out_data;                                           // xbee_uart_s1_agent_rsp_fifo:out_data -> xbee_uart_s1_agent:rf_sink_data
	wire         xbee_uart_s1_agent_rsp_fifo_out_ready;                                          // xbee_uart_s1_agent:rf_sink_ready -> xbee_uart_s1_agent_rsp_fifo:out_ready
	wire         xbee_uart_s1_agent_rsp_fifo_out_startofpacket;                                  // xbee_uart_s1_agent_rsp_fifo:out_startofpacket -> xbee_uart_s1_agent:rf_sink_startofpacket
	wire         xbee_uart_s1_agent_rsp_fifo_out_endofpacket;                                    // xbee_uart_s1_agent_rsp_fifo:out_endofpacket -> xbee_uart_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_011_src_valid;                                                          // cmd_mux_011:src_valid -> xbee_uart_s1_agent:cp_valid
	wire  [87:0] cmd_mux_011_src_data;                                                           // cmd_mux_011:src_data -> xbee_uart_s1_agent:cp_data
	wire         cmd_mux_011_src_ready;                                                          // xbee_uart_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire  [12:0] cmd_mux_011_src_channel;                                                        // cmd_mux_011:src_channel -> xbee_uart_s1_agent:cp_channel
	wire         cmd_mux_011_src_startofpacket;                                                  // cmd_mux_011:src_startofpacket -> xbee_uart_s1_agent:cp_startofpacket
	wire         cmd_mux_011_src_endofpacket;                                                    // cmd_mux_011:src_endofpacket -> xbee_uart_s1_agent:cp_endofpacket
	wire  [31:0] adc_spi_int_spi_control_port_agent_m0_readdata;                                 // adc_spi_int_spi_control_port_translator:uav_readdata -> adc_spi_int_spi_control_port_agent:m0_readdata
	wire         adc_spi_int_spi_control_port_agent_m0_waitrequest;                              // adc_spi_int_spi_control_port_translator:uav_waitrequest -> adc_spi_int_spi_control_port_agent:m0_waitrequest
	wire         adc_spi_int_spi_control_port_agent_m0_debugaccess;                              // adc_spi_int_spi_control_port_agent:m0_debugaccess -> adc_spi_int_spi_control_port_translator:uav_debugaccess
	wire  [11:0] adc_spi_int_spi_control_port_agent_m0_address;                                  // adc_spi_int_spi_control_port_agent:m0_address -> adc_spi_int_spi_control_port_translator:uav_address
	wire   [3:0] adc_spi_int_spi_control_port_agent_m0_byteenable;                               // adc_spi_int_spi_control_port_agent:m0_byteenable -> adc_spi_int_spi_control_port_translator:uav_byteenable
	wire         adc_spi_int_spi_control_port_agent_m0_read;                                     // adc_spi_int_spi_control_port_agent:m0_read -> adc_spi_int_spi_control_port_translator:uav_read
	wire         adc_spi_int_spi_control_port_agent_m0_readdatavalid;                            // adc_spi_int_spi_control_port_translator:uav_readdatavalid -> adc_spi_int_spi_control_port_agent:m0_readdatavalid
	wire         adc_spi_int_spi_control_port_agent_m0_lock;                                     // adc_spi_int_spi_control_port_agent:m0_lock -> adc_spi_int_spi_control_port_translator:uav_lock
	wire  [31:0] adc_spi_int_spi_control_port_agent_m0_writedata;                                // adc_spi_int_spi_control_port_agent:m0_writedata -> adc_spi_int_spi_control_port_translator:uav_writedata
	wire         adc_spi_int_spi_control_port_agent_m0_write;                                    // adc_spi_int_spi_control_port_agent:m0_write -> adc_spi_int_spi_control_port_translator:uav_write
	wire   [2:0] adc_spi_int_spi_control_port_agent_m0_burstcount;                               // adc_spi_int_spi_control_port_agent:m0_burstcount -> adc_spi_int_spi_control_port_translator:uav_burstcount
	wire         adc_spi_int_spi_control_port_agent_rf_source_valid;                             // adc_spi_int_spi_control_port_agent:rf_source_valid -> adc_spi_int_spi_control_port_agent_rsp_fifo:in_valid
	wire  [88:0] adc_spi_int_spi_control_port_agent_rf_source_data;                              // adc_spi_int_spi_control_port_agent:rf_source_data -> adc_spi_int_spi_control_port_agent_rsp_fifo:in_data
	wire         adc_spi_int_spi_control_port_agent_rf_source_ready;                             // adc_spi_int_spi_control_port_agent_rsp_fifo:in_ready -> adc_spi_int_spi_control_port_agent:rf_source_ready
	wire         adc_spi_int_spi_control_port_agent_rf_source_startofpacket;                     // adc_spi_int_spi_control_port_agent:rf_source_startofpacket -> adc_spi_int_spi_control_port_agent_rsp_fifo:in_startofpacket
	wire         adc_spi_int_spi_control_port_agent_rf_source_endofpacket;                       // adc_spi_int_spi_control_port_agent:rf_source_endofpacket -> adc_spi_int_spi_control_port_agent_rsp_fifo:in_endofpacket
	wire         adc_spi_int_spi_control_port_agent_rsp_fifo_out_valid;                          // adc_spi_int_spi_control_port_agent_rsp_fifo:out_valid -> adc_spi_int_spi_control_port_agent:rf_sink_valid
	wire  [88:0] adc_spi_int_spi_control_port_agent_rsp_fifo_out_data;                           // adc_spi_int_spi_control_port_agent_rsp_fifo:out_data -> adc_spi_int_spi_control_port_agent:rf_sink_data
	wire         adc_spi_int_spi_control_port_agent_rsp_fifo_out_ready;                          // adc_spi_int_spi_control_port_agent:rf_sink_ready -> adc_spi_int_spi_control_port_agent_rsp_fifo:out_ready
	wire         adc_spi_int_spi_control_port_agent_rsp_fifo_out_startofpacket;                  // adc_spi_int_spi_control_port_agent_rsp_fifo:out_startofpacket -> adc_spi_int_spi_control_port_agent:rf_sink_startofpacket
	wire         adc_spi_int_spi_control_port_agent_rsp_fifo_out_endofpacket;                    // adc_spi_int_spi_control_port_agent_rsp_fifo:out_endofpacket -> adc_spi_int_spi_control_port_agent:rf_sink_endofpacket
	wire         cmd_mux_012_src_valid;                                                          // cmd_mux_012:src_valid -> adc_spi_int_spi_control_port_agent:cp_valid
	wire  [87:0] cmd_mux_012_src_data;                                                           // cmd_mux_012:src_data -> adc_spi_int_spi_control_port_agent:cp_data
	wire         cmd_mux_012_src_ready;                                                          // adc_spi_int_spi_control_port_agent:cp_ready -> cmd_mux_012:src_ready
	wire  [12:0] cmd_mux_012_src_channel;                                                        // cmd_mux_012:src_channel -> adc_spi_int_spi_control_port_agent:cp_channel
	wire         cmd_mux_012_src_startofpacket;                                                  // cmd_mux_012:src_startofpacket -> adc_spi_int_spi_control_port_agent:cp_startofpacket
	wire         cmd_mux_012_src_endofpacket;                                                    // cmd_mux_012:src_endofpacket -> adc_spi_int_spi_control_port_agent:cp_endofpacket
	wire         clock_crossing_bridge_io_m0_agent_cp_valid;                                     // clock_crossing_bridge_IO_m0_agent:cp_valid -> router:sink_valid
	wire  [87:0] clock_crossing_bridge_io_m0_agent_cp_data;                                      // clock_crossing_bridge_IO_m0_agent:cp_data -> router:sink_data
	wire         clock_crossing_bridge_io_m0_agent_cp_ready;                                     // router:sink_ready -> clock_crossing_bridge_IO_m0_agent:cp_ready
	wire         clock_crossing_bridge_io_m0_agent_cp_startofpacket;                             // clock_crossing_bridge_IO_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         clock_crossing_bridge_io_m0_agent_cp_endofpacket;                               // clock_crossing_bridge_IO_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         sysid_qsys_control_slave_agent_rp_valid;                                        // sysid_qsys_control_slave_agent:rp_valid -> router_001:sink_valid
	wire  [87:0] sysid_qsys_control_slave_agent_rp_data;                                         // sysid_qsys_control_slave_agent:rp_data -> router_001:sink_data
	wire         sysid_qsys_control_slave_agent_rp_ready;                                        // router_001:sink_ready -> sysid_qsys_control_slave_agent:rp_ready
	wire         sysid_qsys_control_slave_agent_rp_startofpacket;                                // sysid_qsys_control_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         sysid_qsys_control_slave_agent_rp_endofpacket;                                  // sysid_qsys_control_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                           // router_001:src_valid -> rsp_demux:sink_valid
	wire  [87:0] router_001_src_data;                                                            // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                                           // rsp_demux:sink_ready -> router_001:src_ready
	wire  [12:0] router_001_src_channel;                                                         // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                                   // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                                     // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         epcs_epcs_control_port_agent_rp_valid;                                          // epcs_epcs_control_port_agent:rp_valid -> router_002:sink_valid
	wire  [87:0] epcs_epcs_control_port_agent_rp_data;                                           // epcs_epcs_control_port_agent:rp_data -> router_002:sink_data
	wire         epcs_epcs_control_port_agent_rp_ready;                                          // router_002:sink_ready -> epcs_epcs_control_port_agent:rp_ready
	wire         epcs_epcs_control_port_agent_rp_startofpacket;                                  // epcs_epcs_control_port_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         epcs_epcs_control_port_agent_rp_endofpacket;                                    // epcs_epcs_control_port_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                           // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [87:0] router_002_src_data;                                                            // router_002:src_data -> rsp_demux_001:sink_data
	wire         router_002_src_ready;                                                           // rsp_demux_001:sink_ready -> router_002:src_ready
	wire  [12:0] router_002_src_channel;                                                         // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_startofpacket;                                                   // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_002_src_endofpacket;                                                     // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         timer_s1_agent_rp_valid;                                                        // timer_s1_agent:rp_valid -> router_003:sink_valid
	wire  [87:0] timer_s1_agent_rp_data;                                                         // timer_s1_agent:rp_data -> router_003:sink_data
	wire         timer_s1_agent_rp_ready;                                                        // router_003:sink_ready -> timer_s1_agent:rp_ready
	wire         timer_s1_agent_rp_startofpacket;                                                // timer_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         timer_s1_agent_rp_endofpacket;                                                  // timer_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                           // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [87:0] router_003_src_data;                                                            // router_003:src_data -> rsp_demux_002:sink_data
	wire         router_003_src_ready;                                                           // rsp_demux_002:sink_ready -> router_003:src_ready
	wire  [12:0] router_003_src_channel;                                                         // router_003:src_channel -> rsp_demux_002:sink_channel
	wire         router_003_src_startofpacket;                                                   // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_003_src_endofpacket;                                                     // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         pio_leds_s1_agent_rp_valid;                                                     // pio_leds_s1_agent:rp_valid -> router_004:sink_valid
	wire  [87:0] pio_leds_s1_agent_rp_data;                                                      // pio_leds_s1_agent:rp_data -> router_004:sink_data
	wire         pio_leds_s1_agent_rp_ready;                                                     // router_004:sink_ready -> pio_leds_s1_agent:rp_ready
	wire         pio_leds_s1_agent_rp_startofpacket;                                             // pio_leds_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         pio_leds_s1_agent_rp_endofpacket;                                               // pio_leds_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                           // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [87:0] router_004_src_data;                                                            // router_004:src_data -> rsp_demux_003:sink_data
	wire         router_004_src_ready;                                                           // rsp_demux_003:sink_ready -> router_004:src_ready
	wire  [12:0] router_004_src_channel;                                                         // router_004:src_channel -> rsp_demux_003:sink_channel
	wire         router_004_src_startofpacket;                                                   // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_004_src_endofpacket;                                                     // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         pio_key_s1_agent_rp_valid;                                                      // pio_key_s1_agent:rp_valid -> router_005:sink_valid
	wire  [87:0] pio_key_s1_agent_rp_data;                                                       // pio_key_s1_agent:rp_data -> router_005:sink_data
	wire         pio_key_s1_agent_rp_ready;                                                      // router_005:sink_ready -> pio_key_s1_agent:rp_ready
	wire         pio_key_s1_agent_rp_startofpacket;                                              // pio_key_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         pio_key_s1_agent_rp_endofpacket;                                                // pio_key_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                           // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [87:0] router_005_src_data;                                                            // router_005:src_data -> rsp_demux_004:sink_data
	wire         router_005_src_ready;                                                           // rsp_demux_004:sink_ready -> router_005:src_ready
	wire  [12:0] router_005_src_channel;                                                         // router_005:src_channel -> rsp_demux_004:sink_channel
	wire         router_005_src_startofpacket;                                                   // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_005_src_endofpacket;                                                     // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         pio_switch_s1_agent_rp_valid;                                                   // pio_switch_s1_agent:rp_valid -> router_006:sink_valid
	wire  [87:0] pio_switch_s1_agent_rp_data;                                                    // pio_switch_s1_agent:rp_data -> router_006:sink_data
	wire         pio_switch_s1_agent_rp_ready;                                                   // router_006:sink_ready -> pio_switch_s1_agent:rp_ready
	wire         pio_switch_s1_agent_rp_startofpacket;                                           // pio_switch_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         pio_switch_s1_agent_rp_endofpacket;                                             // pio_switch_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                           // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [87:0] router_006_src_data;                                                            // router_006:src_data -> rsp_demux_005:sink_data
	wire         router_006_src_ready;                                                           // rsp_demux_005:sink_ready -> router_006:src_ready
	wire  [12:0] router_006_src_channel;                                                         // router_006:src_channel -> rsp_demux_005:sink_channel
	wire         router_006_src_startofpacket;                                                   // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_006_src_endofpacket;                                                     // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         g_sensor_int_s1_agent_rp_valid;                                                 // g_sensor_int_s1_agent:rp_valid -> router_007:sink_valid
	wire  [87:0] g_sensor_int_s1_agent_rp_data;                                                  // g_sensor_int_s1_agent:rp_data -> router_007:sink_data
	wire         g_sensor_int_s1_agent_rp_ready;                                                 // router_007:sink_ready -> g_sensor_int_s1_agent:rp_ready
	wire         g_sensor_int_s1_agent_rp_startofpacket;                                         // g_sensor_int_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         g_sensor_int_s1_agent_rp_endofpacket;                                           // g_sensor_int_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         router_007_src_valid;                                                           // router_007:src_valid -> rsp_demux_006:sink_valid
	wire  [87:0] router_007_src_data;                                                            // router_007:src_data -> rsp_demux_006:sink_data
	wire         router_007_src_ready;                                                           // rsp_demux_006:sink_ready -> router_007:src_ready
	wire  [12:0] router_007_src_channel;                                                         // router_007:src_channel -> rsp_demux_006:sink_channel
	wire         router_007_src_startofpacket;                                                   // router_007:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         router_007_src_endofpacket;                                                     // router_007:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         i2c_sda_s1_agent_rp_valid;                                                      // i2c_sda_s1_agent:rp_valid -> router_008:sink_valid
	wire  [87:0] i2c_sda_s1_agent_rp_data;                                                       // i2c_sda_s1_agent:rp_data -> router_008:sink_data
	wire         i2c_sda_s1_agent_rp_ready;                                                      // router_008:sink_ready -> i2c_sda_s1_agent:rp_ready
	wire         i2c_sda_s1_agent_rp_startofpacket;                                              // i2c_sda_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire         i2c_sda_s1_agent_rp_endofpacket;                                                // i2c_sda_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         router_008_src_valid;                                                           // router_008:src_valid -> rsp_demux_007:sink_valid
	wire  [87:0] router_008_src_data;                                                            // router_008:src_data -> rsp_demux_007:sink_data
	wire         router_008_src_ready;                                                           // rsp_demux_007:sink_ready -> router_008:src_ready
	wire  [12:0] router_008_src_channel;                                                         // router_008:src_channel -> rsp_demux_007:sink_channel
	wire         router_008_src_startofpacket;                                                   // router_008:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire         router_008_src_endofpacket;                                                     // router_008:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         i2c_scl_s1_agent_rp_valid;                                                      // i2c_scl_s1_agent:rp_valid -> router_009:sink_valid
	wire  [87:0] i2c_scl_s1_agent_rp_data;                                                       // i2c_scl_s1_agent:rp_data -> router_009:sink_data
	wire         i2c_scl_s1_agent_rp_ready;                                                      // router_009:sink_ready -> i2c_scl_s1_agent:rp_ready
	wire         i2c_scl_s1_agent_rp_startofpacket;                                              // i2c_scl_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire         i2c_scl_s1_agent_rp_endofpacket;                                                // i2c_scl_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         router_009_src_valid;                                                           // router_009:src_valid -> rsp_demux_008:sink_valid
	wire  [87:0] router_009_src_data;                                                            // router_009:src_data -> rsp_demux_008:sink_data
	wire         router_009_src_ready;                                                           // rsp_demux_008:sink_ready -> router_009:src_ready
	wire  [12:0] router_009_src_channel;                                                         // router_009:src_channel -> rsp_demux_008:sink_channel
	wire         router_009_src_startofpacket;                                                   // router_009:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire         router_009_src_endofpacket;                                                     // router_009:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         ext_sensor_int_s1_agent_rp_valid;                                               // ext_sensor_int_s1_agent:rp_valid -> router_010:sink_valid
	wire  [87:0] ext_sensor_int_s1_agent_rp_data;                                                // ext_sensor_int_s1_agent:rp_data -> router_010:sink_data
	wire         ext_sensor_int_s1_agent_rp_ready;                                               // router_010:sink_ready -> ext_sensor_int_s1_agent:rp_ready
	wire         ext_sensor_int_s1_agent_rp_startofpacket;                                       // ext_sensor_int_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire         ext_sensor_int_s1_agent_rp_endofpacket;                                         // ext_sensor_int_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         router_010_src_valid;                                                           // router_010:src_valid -> rsp_demux_009:sink_valid
	wire  [87:0] router_010_src_data;                                                            // router_010:src_data -> rsp_demux_009:sink_data
	wire         router_010_src_ready;                                                           // rsp_demux_009:sink_ready -> router_010:src_ready
	wire  [12:0] router_010_src_channel;                                                         // router_010:src_channel -> rsp_demux_009:sink_channel
	wire         router_010_src_startofpacket;                                                   // router_010:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire         router_010_src_endofpacket;                                                     // router_010:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         i2c_ext_sda_s1_agent_rp_valid;                                                  // i2c_EXT_sda_s1_agent:rp_valid -> router_011:sink_valid
	wire  [87:0] i2c_ext_sda_s1_agent_rp_data;                                                   // i2c_EXT_sda_s1_agent:rp_data -> router_011:sink_data
	wire         i2c_ext_sda_s1_agent_rp_ready;                                                  // router_011:sink_ready -> i2c_EXT_sda_s1_agent:rp_ready
	wire         i2c_ext_sda_s1_agent_rp_startofpacket;                                          // i2c_EXT_sda_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire         i2c_ext_sda_s1_agent_rp_endofpacket;                                            // i2c_EXT_sda_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         router_011_src_valid;                                                           // router_011:src_valid -> rsp_demux_010:sink_valid
	wire  [87:0] router_011_src_data;                                                            // router_011:src_data -> rsp_demux_010:sink_data
	wire         router_011_src_ready;                                                           // rsp_demux_010:sink_ready -> router_011:src_ready
	wire  [12:0] router_011_src_channel;                                                         // router_011:src_channel -> rsp_demux_010:sink_channel
	wire         router_011_src_startofpacket;                                                   // router_011:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire         router_011_src_endofpacket;                                                     // router_011:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire         xbee_uart_s1_agent_rp_valid;                                                    // xbee_uart_s1_agent:rp_valid -> router_012:sink_valid
	wire  [87:0] xbee_uart_s1_agent_rp_data;                                                     // xbee_uart_s1_agent:rp_data -> router_012:sink_data
	wire         xbee_uart_s1_agent_rp_ready;                                                    // router_012:sink_ready -> xbee_uart_s1_agent:rp_ready
	wire         xbee_uart_s1_agent_rp_startofpacket;                                            // xbee_uart_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire         xbee_uart_s1_agent_rp_endofpacket;                                              // xbee_uart_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire         router_012_src_valid;                                                           // router_012:src_valid -> rsp_demux_011:sink_valid
	wire  [87:0] router_012_src_data;                                                            // router_012:src_data -> rsp_demux_011:sink_data
	wire         router_012_src_ready;                                                           // rsp_demux_011:sink_ready -> router_012:src_ready
	wire  [12:0] router_012_src_channel;                                                         // router_012:src_channel -> rsp_demux_011:sink_channel
	wire         router_012_src_startofpacket;                                                   // router_012:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire         router_012_src_endofpacket;                                                     // router_012:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire         adc_spi_int_spi_control_port_agent_rp_valid;                                    // adc_spi_int_spi_control_port_agent:rp_valid -> router_013:sink_valid
	wire  [87:0] adc_spi_int_spi_control_port_agent_rp_data;                                     // adc_spi_int_spi_control_port_agent:rp_data -> router_013:sink_data
	wire         adc_spi_int_spi_control_port_agent_rp_ready;                                    // router_013:sink_ready -> adc_spi_int_spi_control_port_agent:rp_ready
	wire         adc_spi_int_spi_control_port_agent_rp_startofpacket;                            // adc_spi_int_spi_control_port_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire         adc_spi_int_spi_control_port_agent_rp_endofpacket;                              // adc_spi_int_spi_control_port_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire         router_013_src_valid;                                                           // router_013:src_valid -> rsp_demux_012:sink_valid
	wire  [87:0] router_013_src_data;                                                            // router_013:src_data -> rsp_demux_012:sink_data
	wire         router_013_src_ready;                                                           // rsp_demux_012:sink_ready -> router_013:src_ready
	wire  [12:0] router_013_src_channel;                                                         // router_013:src_channel -> rsp_demux_012:sink_channel
	wire         router_013_src_startofpacket;                                                   // router_013:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire         router_013_src_endofpacket;                                                     // router_013:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire         router_src_valid;                                                               // router:src_valid -> clock_crossing_bridge_IO_m0_limiter:cmd_sink_valid
	wire  [87:0] router_src_data;                                                                // router:src_data -> clock_crossing_bridge_IO_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                               // clock_crossing_bridge_IO_m0_limiter:cmd_sink_ready -> router:src_ready
	wire  [12:0] router_src_channel;                                                             // router:src_channel -> clock_crossing_bridge_IO_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                       // router:src_startofpacket -> clock_crossing_bridge_IO_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                         // router:src_endofpacket -> clock_crossing_bridge_IO_m0_limiter:cmd_sink_endofpacket
	wire  [87:0] clock_crossing_bridge_io_m0_limiter_cmd_src_data;                               // clock_crossing_bridge_IO_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         clock_crossing_bridge_io_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> clock_crossing_bridge_IO_m0_limiter:cmd_src_ready
	wire  [12:0] clock_crossing_bridge_io_m0_limiter_cmd_src_channel;                            // clock_crossing_bridge_IO_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         clock_crossing_bridge_io_m0_limiter_cmd_src_startofpacket;                      // clock_crossing_bridge_IO_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         clock_crossing_bridge_io_m0_limiter_cmd_src_endofpacket;                        // clock_crossing_bridge_IO_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                              // rsp_mux:src_valid -> clock_crossing_bridge_IO_m0_limiter:rsp_sink_valid
	wire  [87:0] rsp_mux_src_data;                                                               // rsp_mux:src_data -> clock_crossing_bridge_IO_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                              // clock_crossing_bridge_IO_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire  [12:0] rsp_mux_src_channel;                                                            // rsp_mux:src_channel -> clock_crossing_bridge_IO_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                                      // rsp_mux:src_startofpacket -> clock_crossing_bridge_IO_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                                        // rsp_mux:src_endofpacket -> clock_crossing_bridge_IO_m0_limiter:rsp_sink_endofpacket
	wire         clock_crossing_bridge_io_m0_limiter_rsp_src_valid;                              // clock_crossing_bridge_IO_m0_limiter:rsp_src_valid -> clock_crossing_bridge_IO_m0_agent:rp_valid
	wire  [87:0] clock_crossing_bridge_io_m0_limiter_rsp_src_data;                               // clock_crossing_bridge_IO_m0_limiter:rsp_src_data -> clock_crossing_bridge_IO_m0_agent:rp_data
	wire         clock_crossing_bridge_io_m0_limiter_rsp_src_ready;                              // clock_crossing_bridge_IO_m0_agent:rp_ready -> clock_crossing_bridge_IO_m0_limiter:rsp_src_ready
	wire  [12:0] clock_crossing_bridge_io_m0_limiter_rsp_src_channel;                            // clock_crossing_bridge_IO_m0_limiter:rsp_src_channel -> clock_crossing_bridge_IO_m0_agent:rp_channel
	wire         clock_crossing_bridge_io_m0_limiter_rsp_src_startofpacket;                      // clock_crossing_bridge_IO_m0_limiter:rsp_src_startofpacket -> clock_crossing_bridge_IO_m0_agent:rp_startofpacket
	wire         clock_crossing_bridge_io_m0_limiter_rsp_src_endofpacket;                        // clock_crossing_bridge_IO_m0_limiter:rsp_src_endofpacket -> clock_crossing_bridge_IO_m0_agent:rp_endofpacket
	wire         cmd_demux_src0_valid;                                                           // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [87:0] cmd_demux_src0_data;                                                            // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                           // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire  [12:0] cmd_demux_src0_channel;                                                         // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                   // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                     // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                           // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [87:0] cmd_demux_src1_data;                                                            // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                           // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire  [12:0] cmd_demux_src1_channel;                                                         // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                   // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                     // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                           // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [87:0] cmd_demux_src2_data;                                                            // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                           // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire  [12:0] cmd_demux_src2_channel;                                                         // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                                   // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                     // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                           // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [87:0] cmd_demux_src3_data;                                                            // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                           // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire  [12:0] cmd_demux_src3_channel;                                                         // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                                   // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                                     // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                           // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [87:0] cmd_demux_src4_data;                                                            // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                           // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire  [12:0] cmd_demux_src4_channel;                                                         // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                                   // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                                     // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                           // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [87:0] cmd_demux_src5_data;                                                            // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                                           // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire  [12:0] cmd_demux_src5_channel;                                                         // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                                   // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                                     // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_src6_valid;                                                           // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [87:0] cmd_demux_src6_data;                                                            // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire         cmd_demux_src6_ready;                                                           // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire  [12:0] cmd_demux_src6_channel;                                                         // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_src6_startofpacket;                                                   // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         cmd_demux_src6_endofpacket;                                                     // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_src7_valid;                                                           // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [87:0] cmd_demux_src7_data;                                                            // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire         cmd_demux_src7_ready;                                                           // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire  [12:0] cmd_demux_src7_channel;                                                         // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_src7_startofpacket;                                                   // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire         cmd_demux_src7_endofpacket;                                                     // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_src8_valid;                                                           // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [87:0] cmd_demux_src8_data;                                                            // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire         cmd_demux_src8_ready;                                                           // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire  [12:0] cmd_demux_src8_channel;                                                         // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_src8_startofpacket;                                                   // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire         cmd_demux_src8_endofpacket;                                                     // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_src9_valid;                                                           // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [87:0] cmd_demux_src9_data;                                                            // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire         cmd_demux_src9_ready;                                                           // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire  [12:0] cmd_demux_src9_channel;                                                         // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_src9_startofpacket;                                                   // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire         cmd_demux_src9_endofpacket;                                                     // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_src10_valid;                                                          // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [87:0] cmd_demux_src10_data;                                                           // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire         cmd_demux_src10_ready;                                                          // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire  [12:0] cmd_demux_src10_channel;                                                        // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire         cmd_demux_src10_startofpacket;                                                  // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire         cmd_demux_src10_endofpacket;                                                    // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire         cmd_demux_src11_valid;                                                          // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [87:0] cmd_demux_src11_data;                                                           // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire         cmd_demux_src11_ready;                                                          // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire  [12:0] cmd_demux_src11_channel;                                                        // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire         cmd_demux_src11_startofpacket;                                                  // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire         cmd_demux_src11_endofpacket;                                                    // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire         cmd_demux_src12_valid;                                                          // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [87:0] cmd_demux_src12_data;                                                           // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire         cmd_demux_src12_ready;                                                          // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire  [12:0] cmd_demux_src12_channel;                                                        // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire         cmd_demux_src12_startofpacket;                                                  // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire         cmd_demux_src12_endofpacket;                                                    // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                           // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [87:0] rsp_demux_src0_data;                                                            // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                           // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire  [12:0] rsp_demux_src0_channel;                                                         // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                   // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                     // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                       // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [87:0] rsp_demux_001_src0_data;                                                        // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                       // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire  [12:0] rsp_demux_001_src0_channel;                                                     // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                               // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                                 // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                       // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [87:0] rsp_demux_002_src0_data;                                                        // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                       // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire  [12:0] rsp_demux_002_src0_channel;                                                     // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                               // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                                 // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                                       // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [87:0] rsp_demux_003_src0_data;                                                        // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                       // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire  [12:0] rsp_demux_003_src0_channel;                                                     // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                               // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                                 // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                       // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [87:0] rsp_demux_004_src0_data;                                                        // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                       // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire  [12:0] rsp_demux_004_src0_channel;                                                     // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                               // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                                 // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                       // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [87:0] rsp_demux_005_src0_data;                                                        // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                                       // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire  [12:0] rsp_demux_005_src0_channel;                                                     // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                               // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                                 // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                                       // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [87:0] rsp_demux_006_src0_data;                                                        // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire         rsp_demux_006_src0_ready;                                                       // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire  [12:0] rsp_demux_006_src0_channel;                                                     // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire         rsp_demux_006_src0_startofpacket;                                               // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                                 // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                                       // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [87:0] rsp_demux_007_src0_data;                                                        // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire         rsp_demux_007_src0_ready;                                                       // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire  [12:0] rsp_demux_007_src0_channel;                                                     // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire         rsp_demux_007_src0_startofpacket;                                               // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire         rsp_demux_007_src0_endofpacket;                                                 // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire         rsp_demux_008_src0_valid;                                                       // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [87:0] rsp_demux_008_src0_data;                                                        // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire         rsp_demux_008_src0_ready;                                                       // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire  [12:0] rsp_demux_008_src0_channel;                                                     // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire         rsp_demux_008_src0_startofpacket;                                               // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire         rsp_demux_008_src0_endofpacket;                                                 // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire         rsp_demux_009_src0_valid;                                                       // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [87:0] rsp_demux_009_src0_data;                                                        // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire         rsp_demux_009_src0_ready;                                                       // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire  [12:0] rsp_demux_009_src0_channel;                                                     // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire         rsp_demux_009_src0_startofpacket;                                               // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire         rsp_demux_009_src0_endofpacket;                                                 // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire         rsp_demux_010_src0_valid;                                                       // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [87:0] rsp_demux_010_src0_data;                                                        // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire         rsp_demux_010_src0_ready;                                                       // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire  [12:0] rsp_demux_010_src0_channel;                                                     // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire         rsp_demux_010_src0_startofpacket;                                               // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire         rsp_demux_010_src0_endofpacket;                                                 // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire         rsp_demux_011_src0_valid;                                                       // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [87:0] rsp_demux_011_src0_data;                                                        // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire         rsp_demux_011_src0_ready;                                                       // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire  [12:0] rsp_demux_011_src0_channel;                                                     // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire         rsp_demux_011_src0_startofpacket;                                               // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire         rsp_demux_011_src0_endofpacket;                                                 // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire         rsp_demux_012_src0_valid;                                                       // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [87:0] rsp_demux_012_src0_data;                                                        // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire         rsp_demux_012_src0_ready;                                                       // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire  [12:0] rsp_demux_012_src0_channel;                                                     // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire         rsp_demux_012_src0_startofpacket;                                               // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire         rsp_demux_012_src0_endofpacket;                                                 // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire  [12:0] clock_crossing_bridge_io_m0_limiter_cmd_valid_data;                             // clock_crossing_bridge_IO_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire         sysid_qsys_control_slave_agent_rdata_fifo_src_valid;                            // sysid_qsys_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] sysid_qsys_control_slave_agent_rdata_fifo_src_data;                             // sysid_qsys_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         sysid_qsys_control_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter:in_0_ready -> sysid_qsys_control_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                                  // avalon_st_adapter:out_0_valid -> sysid_qsys_control_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                                   // avalon_st_adapter:out_0_data -> sysid_qsys_control_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                                  // sysid_qsys_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                                  // avalon_st_adapter:out_0_error -> sysid_qsys_control_slave_agent:rdata_fifo_sink_error
	wire         epcs_epcs_control_port_agent_rdata_fifo_src_valid;                              // epcs_epcs_control_port_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] epcs_epcs_control_port_agent_rdata_fifo_src_data;                               // epcs_epcs_control_port_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         epcs_epcs_control_port_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_001:in_0_ready -> epcs_epcs_control_port_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                              // avalon_st_adapter_001:out_0_valid -> epcs_epcs_control_port_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                               // avalon_st_adapter_001:out_0_data -> epcs_epcs_control_port_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                              // epcs_epcs_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                              // avalon_st_adapter_001:out_0_error -> epcs_epcs_control_port_agent:rdata_fifo_sink_error
	wire         timer_s1_agent_rdata_fifo_src_valid;                                            // timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] timer_s1_agent_rdata_fifo_src_data;                                             // timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         timer_s1_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_002:in_0_ready -> timer_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                              // avalon_st_adapter_002:out_0_valid -> timer_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                               // avalon_st_adapter_002:out_0_data -> timer_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                              // timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                              // avalon_st_adapter_002:out_0_error -> timer_s1_agent:rdata_fifo_sink_error
	wire         pio_leds_s1_agent_rdata_fifo_src_valid;                                         // pio_leds_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] pio_leds_s1_agent_rdata_fifo_src_data;                                          // pio_leds_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         pio_leds_s1_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_003:in_0_ready -> pio_leds_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                              // avalon_st_adapter_003:out_0_valid -> pio_leds_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                               // avalon_st_adapter_003:out_0_data -> pio_leds_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                              // pio_leds_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                              // avalon_st_adapter_003:out_0_error -> pio_leds_s1_agent:rdata_fifo_sink_error
	wire         pio_key_s1_agent_rdata_fifo_src_valid;                                          // pio_key_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] pio_key_s1_agent_rdata_fifo_src_data;                                           // pio_key_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         pio_key_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_004:in_0_ready -> pio_key_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                              // avalon_st_adapter_004:out_0_valid -> pio_key_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                               // avalon_st_adapter_004:out_0_data -> pio_key_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                              // pio_key_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                              // avalon_st_adapter_004:out_0_error -> pio_key_s1_agent:rdata_fifo_sink_error
	wire         pio_switch_s1_agent_rdata_fifo_src_valid;                                       // pio_switch_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] pio_switch_s1_agent_rdata_fifo_src_data;                                        // pio_switch_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         pio_switch_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_005:in_0_ready -> pio_switch_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                              // avalon_st_adapter_005:out_0_valid -> pio_switch_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                               // avalon_st_adapter_005:out_0_data -> pio_switch_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                              // pio_switch_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                              // avalon_st_adapter_005:out_0_error -> pio_switch_s1_agent:rdata_fifo_sink_error
	wire         g_sensor_int_s1_agent_rdata_fifo_src_valid;                                     // g_sensor_int_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire  [33:0] g_sensor_int_s1_agent_rdata_fifo_src_data;                                      // g_sensor_int_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire         g_sensor_int_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_006:in_0_ready -> g_sensor_int_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_006_out_0_valid;                                              // avalon_st_adapter_006:out_0_valid -> g_sensor_int_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_006_out_0_data;                                               // avalon_st_adapter_006:out_0_data -> g_sensor_int_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_006_out_0_ready;                                              // g_sensor_int_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire   [0:0] avalon_st_adapter_006_out_0_error;                                              // avalon_st_adapter_006:out_0_error -> g_sensor_int_s1_agent:rdata_fifo_sink_error
	wire         i2c_sda_s1_agent_rdata_fifo_src_valid;                                          // i2c_sda_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire  [33:0] i2c_sda_s1_agent_rdata_fifo_src_data;                                           // i2c_sda_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire         i2c_sda_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_007:in_0_ready -> i2c_sda_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_007_out_0_valid;                                              // avalon_st_adapter_007:out_0_valid -> i2c_sda_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_007_out_0_data;                                               // avalon_st_adapter_007:out_0_data -> i2c_sda_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_007_out_0_ready;                                              // i2c_sda_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire   [0:0] avalon_st_adapter_007_out_0_error;                                              // avalon_st_adapter_007:out_0_error -> i2c_sda_s1_agent:rdata_fifo_sink_error
	wire         i2c_scl_s1_agent_rdata_fifo_src_valid;                                          // i2c_scl_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire  [33:0] i2c_scl_s1_agent_rdata_fifo_src_data;                                           // i2c_scl_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire         i2c_scl_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_008:in_0_ready -> i2c_scl_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_008_out_0_valid;                                              // avalon_st_adapter_008:out_0_valid -> i2c_scl_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_008_out_0_data;                                               // avalon_st_adapter_008:out_0_data -> i2c_scl_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_008_out_0_ready;                                              // i2c_scl_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire   [0:0] avalon_st_adapter_008_out_0_error;                                              // avalon_st_adapter_008:out_0_error -> i2c_scl_s1_agent:rdata_fifo_sink_error
	wire         ext_sensor_int_s1_agent_rdata_fifo_src_valid;                                   // ext_sensor_int_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire  [33:0] ext_sensor_int_s1_agent_rdata_fifo_src_data;                                    // ext_sensor_int_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire         ext_sensor_int_s1_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_009:in_0_ready -> ext_sensor_int_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_009_out_0_valid;                                              // avalon_st_adapter_009:out_0_valid -> ext_sensor_int_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_009_out_0_data;                                               // avalon_st_adapter_009:out_0_data -> ext_sensor_int_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_009_out_0_ready;                                              // ext_sensor_int_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire   [0:0] avalon_st_adapter_009_out_0_error;                                              // avalon_st_adapter_009:out_0_error -> ext_sensor_int_s1_agent:rdata_fifo_sink_error
	wire         i2c_ext_sda_s1_agent_rdata_fifo_src_valid;                                      // i2c_EXT_sda_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire  [33:0] i2c_ext_sda_s1_agent_rdata_fifo_src_data;                                       // i2c_EXT_sda_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire         i2c_ext_sda_s1_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_010:in_0_ready -> i2c_EXT_sda_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_010_out_0_valid;                                              // avalon_st_adapter_010:out_0_valid -> i2c_EXT_sda_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_010_out_0_data;                                               // avalon_st_adapter_010:out_0_data -> i2c_EXT_sda_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_010_out_0_ready;                                              // i2c_EXT_sda_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire   [0:0] avalon_st_adapter_010_out_0_error;                                              // avalon_st_adapter_010:out_0_error -> i2c_EXT_sda_s1_agent:rdata_fifo_sink_error
	wire         xbee_uart_s1_agent_rdata_fifo_src_valid;                                        // xbee_uart_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire  [33:0] xbee_uart_s1_agent_rdata_fifo_src_data;                                         // xbee_uart_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire         xbee_uart_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_011:in_0_ready -> xbee_uart_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_011_out_0_valid;                                              // avalon_st_adapter_011:out_0_valid -> xbee_uart_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_011_out_0_data;                                               // avalon_st_adapter_011:out_0_data -> xbee_uart_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_011_out_0_ready;                                              // xbee_uart_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire   [0:0] avalon_st_adapter_011_out_0_error;                                              // avalon_st_adapter_011:out_0_error -> xbee_uart_s1_agent:rdata_fifo_sink_error
	wire         adc_spi_int_spi_control_port_agent_rdata_fifo_src_valid;                        // adc_spi_int_spi_control_port_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire  [33:0] adc_spi_int_spi_control_port_agent_rdata_fifo_src_data;                         // adc_spi_int_spi_control_port_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire         adc_spi_int_spi_control_port_agent_rdata_fifo_src_ready;                        // avalon_st_adapter_012:in_0_ready -> adc_spi_int_spi_control_port_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_012_out_0_valid;                                              // avalon_st_adapter_012:out_0_valid -> adc_spi_int_spi_control_port_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_012_out_0_data;                                               // avalon_st_adapter_012:out_0_data -> adc_spi_int_spi_control_port_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_012_out_0_ready;                                              // adc_spi_int_spi_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire   [0:0] avalon_st_adapter_012_out_0_error;                                              // avalon_st_adapter_012:out_0_error -> adc_spi_int_spi_control_port_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (12),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (12),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) clock_crossing_bridge_io_m0_translator (
		.clk                    (altpll_sys_c2_clk),                                                              //                       clk.clk
		.reset                  (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (clock_crossing_bridge_IO_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (clock_crossing_bridge_IO_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (clock_crossing_bridge_IO_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (clock_crossing_bridge_IO_m0_byteenable),                                         //                          .byteenable
		.av_read                (clock_crossing_bridge_IO_m0_read),                                               //                          .read
		.av_readdata            (clock_crossing_bridge_IO_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (clock_crossing_bridge_IO_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (clock_crossing_bridge_IO_m0_write),                                              //                          .write
		.av_writedata           (clock_crossing_bridge_IO_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (clock_crossing_bridge_IO_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                           //               (terminated)
		.av_begintransfer       (1'b0),                                                                           //               (terminated)
		.av_chipselect          (1'b0),                                                                           //               (terminated)
		.av_lock                (1'b0),                                                                           //               (terminated)
		.uav_clken              (),                                                                               //               (terminated)
		.av_clken               (1'b1),                                                                           //               (terminated)
		.uav_response           (2'b00),                                                                          //               (terminated)
		.av_response            (),                                                                               //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                           //               (terminated)
		.av_writeresponsevalid  ()                                                                                //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (12),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                    (altpll_sys_c2_clk),                                             //                      clk.clk
		.reset                  (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_qsys_control_slave_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_control_slave_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (sysid_qsys_control_slave_agent_m0_read),                        //                         .read
		.uav_write              (sysid_qsys_control_slave_agent_m0_write),                       //                         .write
		.uav_waitrequest        (sysid_qsys_control_slave_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_control_slave_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_control_slave_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (sysid_qsys_control_slave_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (sysid_qsys_control_slave_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (sysid_qsys_control_slave_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (sysid_qsys_control_slave_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (sysid_qsys_control_slave_address),                              //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_control_slave_readdata),                             //                         .readdata
		.av_write               (),                                                              //              (terminated)
		.av_read                (),                                                              //              (terminated)
		.av_writedata           (),                                                              //              (terminated)
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_chipselect          (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (12),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) epcs_epcs_control_port_translator (
		.clk                    (altpll_sys_c2_clk),                                             //                      clk.clk
		.reset                  (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (epcs_epcs_control_port_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (epcs_epcs_control_port_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (epcs_epcs_control_port_agent_m0_read),                          //                         .read
		.uav_write              (epcs_epcs_control_port_agent_m0_write),                         //                         .write
		.uav_waitrequest        (epcs_epcs_control_port_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (epcs_epcs_control_port_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (epcs_epcs_control_port_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (epcs_epcs_control_port_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (epcs_epcs_control_port_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (epcs_epcs_control_port_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (epcs_epcs_control_port_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (epcs_epcs_control_port_address),                                //      avalon_anti_slave_0.address
		.av_write               (epcs_epcs_control_port_write),                                  //                         .write
		.av_read                (epcs_epcs_control_port_read),                                   //                         .read
		.av_readdata            (epcs_epcs_control_port_readdata),                               //                         .readdata
		.av_writedata           (epcs_epcs_control_port_writedata),                              //                         .writedata
		.av_chipselect          (epcs_epcs_control_port_chipselect),                             //                         .chipselect
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (12),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_s1_translator (
		.clk                    (altpll_sys_c2_clk),                                             //                      clk.clk
		.reset                  (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_s1_agent_m0_address),                                     // avalon_universal_slave_0.address
		.uav_burstcount         (timer_s1_agent_m0_burstcount),                                  //                         .burstcount
		.uav_read               (timer_s1_agent_m0_read),                                        //                         .read
		.uav_write              (timer_s1_agent_m0_write),                                       //                         .write
		.uav_waitrequest        (timer_s1_agent_m0_waitrequest),                                 //                         .waitrequest
		.uav_readdatavalid      (timer_s1_agent_m0_readdatavalid),                               //                         .readdatavalid
		.uav_byteenable         (timer_s1_agent_m0_byteenable),                                  //                         .byteenable
		.uav_readdata           (timer_s1_agent_m0_readdata),                                    //                         .readdata
		.uav_writedata          (timer_s1_agent_m0_writedata),                                   //                         .writedata
		.uav_lock               (timer_s1_agent_m0_lock),                                        //                         .lock
		.uav_debugaccess        (timer_s1_agent_m0_debugaccess),                                 //                         .debugaccess
		.av_address             (timer_s1_address),                                              //      avalon_anti_slave_0.address
		.av_write               (timer_s1_write),                                                //                         .write
		.av_readdata            (timer_s1_readdata),                                             //                         .readdata
		.av_writedata           (timer_s1_writedata),                                            //                         .writedata
		.av_chipselect          (timer_s1_chipselect),                                           //                         .chipselect
		.av_read                (),                                                              //              (terminated)
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (12),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_leds_s1_translator (
		.clk                    (altpll_sys_c2_clk),                                             //                      clk.clk
		.reset                  (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_leds_s1_agent_m0_address),                                  // avalon_universal_slave_0.address
		.uav_burstcount         (pio_leds_s1_agent_m0_burstcount),                               //                         .burstcount
		.uav_read               (pio_leds_s1_agent_m0_read),                                     //                         .read
		.uav_write              (pio_leds_s1_agent_m0_write),                                    //                         .write
		.uav_waitrequest        (pio_leds_s1_agent_m0_waitrequest),                              //                         .waitrequest
		.uav_readdatavalid      (pio_leds_s1_agent_m0_readdatavalid),                            //                         .readdatavalid
		.uav_byteenable         (pio_leds_s1_agent_m0_byteenable),                               //                         .byteenable
		.uav_readdata           (pio_leds_s1_agent_m0_readdata),                                 //                         .readdata
		.uav_writedata          (pio_leds_s1_agent_m0_writedata),                                //                         .writedata
		.uav_lock               (pio_leds_s1_agent_m0_lock),                                     //                         .lock
		.uav_debugaccess        (pio_leds_s1_agent_m0_debugaccess),                              //                         .debugaccess
		.av_address             (pio_leds_s1_address),                                           //      avalon_anti_slave_0.address
		.av_write               (pio_leds_s1_write),                                             //                         .write
		.av_readdata            (pio_leds_s1_readdata),                                          //                         .readdata
		.av_writedata           (pio_leds_s1_writedata),                                         //                         .writedata
		.av_chipselect          (pio_leds_s1_chipselect),                                        //                         .chipselect
		.av_read                (),                                                              //              (terminated)
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (12),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_key_s1_translator (
		.clk                    (altpll_sys_c2_clk),                                             //                      clk.clk
		.reset                  (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_key_s1_agent_m0_address),                                   // avalon_universal_slave_0.address
		.uav_burstcount         (pio_key_s1_agent_m0_burstcount),                                //                         .burstcount
		.uav_read               (pio_key_s1_agent_m0_read),                                      //                         .read
		.uav_write              (pio_key_s1_agent_m0_write),                                     //                         .write
		.uav_waitrequest        (pio_key_s1_agent_m0_waitrequest),                               //                         .waitrequest
		.uav_readdatavalid      (pio_key_s1_agent_m0_readdatavalid),                             //                         .readdatavalid
		.uav_byteenable         (pio_key_s1_agent_m0_byteenable),                                //                         .byteenable
		.uav_readdata           (pio_key_s1_agent_m0_readdata),                                  //                         .readdata
		.uav_writedata          (pio_key_s1_agent_m0_writedata),                                 //                         .writedata
		.uav_lock               (pio_key_s1_agent_m0_lock),                                      //                         .lock
		.uav_debugaccess        (pio_key_s1_agent_m0_debugaccess),                               //                         .debugaccess
		.av_address             (pio_key_s1_address),                                            //      avalon_anti_slave_0.address
		.av_write               (pio_key_s1_write),                                              //                         .write
		.av_readdata            (pio_key_s1_readdata),                                           //                         .readdata
		.av_writedata           (pio_key_s1_writedata),                                          //                         .writedata
		.av_chipselect          (pio_key_s1_chipselect),                                         //                         .chipselect
		.av_read                (),                                                              //              (terminated)
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (12),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_switch_s1_translator (
		.clk                    (altpll_sys_c2_clk),                                             //                      clk.clk
		.reset                  (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_switch_s1_agent_m0_address),                                // avalon_universal_slave_0.address
		.uav_burstcount         (pio_switch_s1_agent_m0_burstcount),                             //                         .burstcount
		.uav_read               (pio_switch_s1_agent_m0_read),                                   //                         .read
		.uav_write              (pio_switch_s1_agent_m0_write),                                  //                         .write
		.uav_waitrequest        (pio_switch_s1_agent_m0_waitrequest),                            //                         .waitrequest
		.uav_readdatavalid      (pio_switch_s1_agent_m0_readdatavalid),                          //                         .readdatavalid
		.uav_byteenable         (pio_switch_s1_agent_m0_byteenable),                             //                         .byteenable
		.uav_readdata           (pio_switch_s1_agent_m0_readdata),                               //                         .readdata
		.uav_writedata          (pio_switch_s1_agent_m0_writedata),                              //                         .writedata
		.uav_lock               (pio_switch_s1_agent_m0_lock),                                   //                         .lock
		.uav_debugaccess        (pio_switch_s1_agent_m0_debugaccess),                            //                         .debugaccess
		.av_address             (pio_switch_s1_address),                                         //      avalon_anti_slave_0.address
		.av_readdata            (pio_switch_s1_readdata),                                        //                         .readdata
		.av_write               (),                                                              //              (terminated)
		.av_read                (),                                                              //              (terminated)
		.av_writedata           (),                                                              //              (terminated)
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_chipselect          (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (12),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) g_sensor_int_s1_translator (
		.clk                    (altpll_sys_c2_clk),                                             //                      clk.clk
		.reset                  (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (g_sensor_int_s1_agent_m0_address),                              // avalon_universal_slave_0.address
		.uav_burstcount         (g_sensor_int_s1_agent_m0_burstcount),                           //                         .burstcount
		.uav_read               (g_sensor_int_s1_agent_m0_read),                                 //                         .read
		.uav_write              (g_sensor_int_s1_agent_m0_write),                                //                         .write
		.uav_waitrequest        (g_sensor_int_s1_agent_m0_waitrequest),                          //                         .waitrequest
		.uav_readdatavalid      (g_sensor_int_s1_agent_m0_readdatavalid),                        //                         .readdatavalid
		.uav_byteenable         (g_sensor_int_s1_agent_m0_byteenable),                           //                         .byteenable
		.uav_readdata           (g_sensor_int_s1_agent_m0_readdata),                             //                         .readdata
		.uav_writedata          (g_sensor_int_s1_agent_m0_writedata),                            //                         .writedata
		.uav_lock               (g_sensor_int_s1_agent_m0_lock),                                 //                         .lock
		.uav_debugaccess        (g_sensor_int_s1_agent_m0_debugaccess),                          //                         .debugaccess
		.av_address             (g_sensor_int_s1_address),                                       //      avalon_anti_slave_0.address
		.av_write               (g_sensor_int_s1_write),                                         //                         .write
		.av_readdata            (g_sensor_int_s1_readdata),                                      //                         .readdata
		.av_writedata           (g_sensor_int_s1_writedata),                                     //                         .writedata
		.av_chipselect          (g_sensor_int_s1_chipselect),                                    //                         .chipselect
		.av_read                (),                                                              //              (terminated)
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (12),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_sda_s1_translator (
		.clk                    (altpll_sys_c2_clk),                                             //                      clk.clk
		.reset                  (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_sda_s1_agent_m0_address),                                   // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_sda_s1_agent_m0_burstcount),                                //                         .burstcount
		.uav_read               (i2c_sda_s1_agent_m0_read),                                      //                         .read
		.uav_write              (i2c_sda_s1_agent_m0_write),                                     //                         .write
		.uav_waitrequest        (i2c_sda_s1_agent_m0_waitrequest),                               //                         .waitrequest
		.uav_readdatavalid      (i2c_sda_s1_agent_m0_readdatavalid),                             //                         .readdatavalid
		.uav_byteenable         (i2c_sda_s1_agent_m0_byteenable),                                //                         .byteenable
		.uav_readdata           (i2c_sda_s1_agent_m0_readdata),                                  //                         .readdata
		.uav_writedata          (i2c_sda_s1_agent_m0_writedata),                                 //                         .writedata
		.uav_lock               (i2c_sda_s1_agent_m0_lock),                                      //                         .lock
		.uav_debugaccess        (i2c_sda_s1_agent_m0_debugaccess),                               //                         .debugaccess
		.av_address             (i2c_sda_s1_address),                                            //      avalon_anti_slave_0.address
		.av_write               (i2c_sda_s1_write),                                              //                         .write
		.av_readdata            (i2c_sda_s1_readdata),                                           //                         .readdata
		.av_writedata           (i2c_sda_s1_writedata),                                          //                         .writedata
		.av_chipselect          (i2c_sda_s1_chipselect),                                         //                         .chipselect
		.av_read                (),                                                              //              (terminated)
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (12),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_scl_s1_translator (
		.clk                    (altpll_sys_c2_clk),                                             //                      clk.clk
		.reset                  (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_scl_s1_agent_m0_address),                                   // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_scl_s1_agent_m0_burstcount),                                //                         .burstcount
		.uav_read               (i2c_scl_s1_agent_m0_read),                                      //                         .read
		.uav_write              (i2c_scl_s1_agent_m0_write),                                     //                         .write
		.uav_waitrequest        (i2c_scl_s1_agent_m0_waitrequest),                               //                         .waitrequest
		.uav_readdatavalid      (i2c_scl_s1_agent_m0_readdatavalid),                             //                         .readdatavalid
		.uav_byteenable         (i2c_scl_s1_agent_m0_byteenable),                                //                         .byteenable
		.uav_readdata           (i2c_scl_s1_agent_m0_readdata),                                  //                         .readdata
		.uav_writedata          (i2c_scl_s1_agent_m0_writedata),                                 //                         .writedata
		.uav_lock               (i2c_scl_s1_agent_m0_lock),                                      //                         .lock
		.uav_debugaccess        (i2c_scl_s1_agent_m0_debugaccess),                               //                         .debugaccess
		.av_address             (i2c_scl_s1_address),                                            //      avalon_anti_slave_0.address
		.av_write               (i2c_scl_s1_write),                                              //                         .write
		.av_readdata            (i2c_scl_s1_readdata),                                           //                         .readdata
		.av_writedata           (i2c_scl_s1_writedata),                                          //                         .writedata
		.av_chipselect          (i2c_scl_s1_chipselect),                                         //                         .chipselect
		.av_read                (),                                                              //              (terminated)
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (12),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ext_sensor_int_s1_translator (
		.clk                    (altpll_sys_c2_clk),                                             //                      clk.clk
		.reset                  (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ext_sensor_int_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (ext_sensor_int_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (ext_sensor_int_s1_agent_m0_read),                               //                         .read
		.uav_write              (ext_sensor_int_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (ext_sensor_int_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (ext_sensor_int_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (ext_sensor_int_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (ext_sensor_int_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (ext_sensor_int_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (ext_sensor_int_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (ext_sensor_int_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (ext_sensor_int_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write               (ext_sensor_int_s1_write),                                       //                         .write
		.av_readdata            (ext_sensor_int_s1_readdata),                                    //                         .readdata
		.av_writedata           (ext_sensor_int_s1_writedata),                                   //                         .writedata
		.av_chipselect          (ext_sensor_int_s1_chipselect),                                  //                         .chipselect
		.av_read                (),                                                              //              (terminated)
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (12),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_ext_sda_s1_translator (
		.clk                    (altpll_sys_c2_clk),                                             //                      clk.clk
		.reset                  (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_ext_sda_s1_agent_m0_address),                               // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_ext_sda_s1_agent_m0_burstcount),                            //                         .burstcount
		.uav_read               (i2c_ext_sda_s1_agent_m0_read),                                  //                         .read
		.uav_write              (i2c_ext_sda_s1_agent_m0_write),                                 //                         .write
		.uav_waitrequest        (i2c_ext_sda_s1_agent_m0_waitrequest),                           //                         .waitrequest
		.uav_readdatavalid      (i2c_ext_sda_s1_agent_m0_readdatavalid),                         //                         .readdatavalid
		.uav_byteenable         (i2c_ext_sda_s1_agent_m0_byteenable),                            //                         .byteenable
		.uav_readdata           (i2c_ext_sda_s1_agent_m0_readdata),                              //                         .readdata
		.uav_writedata          (i2c_ext_sda_s1_agent_m0_writedata),                             //                         .writedata
		.uav_lock               (i2c_ext_sda_s1_agent_m0_lock),                                  //                         .lock
		.uav_debugaccess        (i2c_ext_sda_s1_agent_m0_debugaccess),                           //                         .debugaccess
		.av_address             (i2c_EXT_sda_s1_address),                                        //      avalon_anti_slave_0.address
		.av_write               (i2c_EXT_sda_s1_write),                                          //                         .write
		.av_readdata            (i2c_EXT_sda_s1_readdata),                                       //                         .readdata
		.av_writedata           (i2c_EXT_sda_s1_writedata),                                      //                         .writedata
		.av_chipselect          (i2c_EXT_sda_s1_chipselect),                                     //                         .chipselect
		.av_read                (),                                                              //              (terminated)
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (12),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) xbee_uart_s1_translator (
		.clk                    (altpll_sys_c2_clk),                                             //                      clk.clk
		.reset                  (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (xbee_uart_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (xbee_uart_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (xbee_uart_s1_agent_m0_read),                                    //                         .read
		.uav_write              (xbee_uart_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (xbee_uart_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (xbee_uart_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (xbee_uart_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (xbee_uart_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (xbee_uart_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (xbee_uart_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (xbee_uart_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (xbee_uart_s1_address),                                          //      avalon_anti_slave_0.address
		.av_write               (xbee_uart_s1_write),                                            //                         .write
		.av_read                (xbee_uart_s1_read),                                             //                         .read
		.av_readdata            (xbee_uart_s1_readdata),                                         //                         .readdata
		.av_writedata           (xbee_uart_s1_writedata),                                        //                         .writedata
		.av_begintransfer       (xbee_uart_s1_begintransfer),                                    //                         .begintransfer
		.av_chipselect          (xbee_uart_s1_chipselect),                                       //                         .chipselect
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (12),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) adc_spi_int_spi_control_port_translator (
		.clk                    (altpll_sys_c2_clk),                                             //                      clk.clk
		.reset                  (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (adc_spi_int_spi_control_port_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (adc_spi_int_spi_control_port_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (adc_spi_int_spi_control_port_agent_m0_read),                    //                         .read
		.uav_write              (adc_spi_int_spi_control_port_agent_m0_write),                   //                         .write
		.uav_waitrequest        (adc_spi_int_spi_control_port_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (adc_spi_int_spi_control_port_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (adc_spi_int_spi_control_port_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (adc_spi_int_spi_control_port_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (adc_spi_int_spi_control_port_agent_m0_writedata),               //                         .writedata
		.uav_lock               (adc_spi_int_spi_control_port_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (adc_spi_int_spi_control_port_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (adc_spi_int_spi_control_port_address),                          //      avalon_anti_slave_0.address
		.av_write               (adc_spi_int_spi_control_port_write),                            //                         .write
		.av_read                (adc_spi_int_spi_control_port_read),                             //                         .read
		.av_readdata            (adc_spi_int_spi_control_port_readdata),                         //                         .readdata
		.av_writedata           (adc_spi_int_spi_control_port_writedata),                        //                         .writedata
		.av_chipselect          (adc_spi_int_spi_control_port_chipselect),                       //                         .chipselect
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_QOS_H                 (66),
		.PKT_QOS_L                 (66),
		.PKT_DATA_SIDEBAND_H       (64),
		.PKT_DATA_SIDEBAND_L       (64),
		.PKT_ADDR_SIDEBAND_H       (63),
		.PKT_ADDR_SIDEBAND_L       (63),
		.PKT_BURST_TYPE_H          (62),
		.PKT_BURST_TYPE_L          (61),
		.PKT_CACHE_H               (82),
		.PKT_CACHE_L               (79),
		.PKT_THREAD_ID_H           (75),
		.PKT_THREAD_ID_L           (75),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_EXCLUSIVE       (53),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (71),
		.ST_DATA_W                 (88),
		.ST_CHANNEL_W              (13),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) clock_crossing_bridge_io_m0_agent (
		.clk                   (altpll_sys_c2_clk),                                                              //       clk.clk
		.reset                 (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (clock_crossing_bridge_io_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (clock_crossing_bridge_io_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (clock_crossing_bridge_io_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (clock_crossing_bridge_io_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (clock_crossing_bridge_io_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (clock_crossing_bridge_io_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (clock_crossing_bridge_io_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (clock_crossing_bridge_io_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (clock_crossing_bridge_io_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (clock_crossing_bridge_io_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (clock_crossing_bridge_io_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                               // (terminated)
		.av_writeresponsevalid ()                                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_control_slave_agent (
		.clk                     (altpll_sys_c2_clk),                                             //             clk.clk
		.reset                   (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_agent_m0_address),                     //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_agent_m0_lock),                        //                .lock
		.m0_readdata             (sysid_qsys_control_slave_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_agent_m0_read),                        //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_agent_m0_writedata),                   //                .writedata
		.m0_write                (sysid_qsys_control_slave_agent_m0_write),                       //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_agent_rp_ready),                       //                .ready
		.rp_valid                (sysid_qsys_control_slave_agent_rp_valid),                       //                .valid
		.rp_data                 (sysid_qsys_control_slave_agent_rp_data),                        //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                             //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                             //                .valid
		.cp_data                 (cmd_mux_src_data),                                              //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                       //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                           //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (sysid_qsys_control_slave_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rsp_fifo (
		.clk               (altpll_sys_c2_clk),                                             //       clk.clk
		.reset             (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rf_source_data),                 //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rf_source_valid),                //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (sysid_qsys_control_slave_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) epcs_epcs_control_port_agent (
		.clk                     (altpll_sys_c2_clk),                                             //             clk.clk
		.reset                   (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (epcs_epcs_control_port_agent_m0_address),                       //              m0.address
		.m0_burstcount           (epcs_epcs_control_port_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (epcs_epcs_control_port_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (epcs_epcs_control_port_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (epcs_epcs_control_port_agent_m0_lock),                          //                .lock
		.m0_readdata             (epcs_epcs_control_port_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (epcs_epcs_control_port_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (epcs_epcs_control_port_agent_m0_read),                          //                .read
		.m0_waitrequest          (epcs_epcs_control_port_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (epcs_epcs_control_port_agent_m0_writedata),                     //                .writedata
		.m0_write                (epcs_epcs_control_port_agent_m0_write),                         //                .write
		.rp_endofpacket          (epcs_epcs_control_port_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (epcs_epcs_control_port_agent_rp_ready),                         //                .ready
		.rp_valid                (epcs_epcs_control_port_agent_rp_valid),                         //                .valid
		.rp_data                 (epcs_epcs_control_port_agent_rp_data),                          //                .data
		.rp_startofpacket        (epcs_epcs_control_port_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                       //                .channel
		.rf_sink_ready           (epcs_epcs_control_port_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (epcs_epcs_control_port_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (epcs_epcs_control_port_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (epcs_epcs_control_port_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (epcs_epcs_control_port_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (epcs_epcs_control_port_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (epcs_epcs_control_port_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (epcs_epcs_control_port_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (epcs_epcs_control_port_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (epcs_epcs_control_port_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (epcs_epcs_control_port_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (epcs_epcs_control_port_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (epcs_epcs_control_port_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) epcs_epcs_control_port_agent_rsp_fifo (
		.clk               (altpll_sys_c2_clk),                                             //       clk.clk
		.reset             (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (epcs_epcs_control_port_agent_rf_source_data),                   //        in.data
		.in_valid          (epcs_epcs_control_port_agent_rf_source_valid),                  //          .valid
		.in_ready          (epcs_epcs_control_port_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (epcs_epcs_control_port_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (epcs_epcs_control_port_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (epcs_epcs_control_port_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (epcs_epcs_control_port_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (epcs_epcs_control_port_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (epcs_epcs_control_port_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (epcs_epcs_control_port_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_s1_agent (
		.clk                     (altpll_sys_c2_clk),                                             //             clk.clk
		.reset                   (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_s1_agent_m0_address),                                     //              m0.address
		.m0_burstcount           (timer_s1_agent_m0_burstcount),                                  //                .burstcount
		.m0_byteenable           (timer_s1_agent_m0_byteenable),                                  //                .byteenable
		.m0_debugaccess          (timer_s1_agent_m0_debugaccess),                                 //                .debugaccess
		.m0_lock                 (timer_s1_agent_m0_lock),                                        //                .lock
		.m0_readdata             (timer_s1_agent_m0_readdata),                                    //                .readdata
		.m0_readdatavalid        (timer_s1_agent_m0_readdatavalid),                               //                .readdatavalid
		.m0_read                 (timer_s1_agent_m0_read),                                        //                .read
		.m0_waitrequest          (timer_s1_agent_m0_waitrequest),                                 //                .waitrequest
		.m0_writedata            (timer_s1_agent_m0_writedata),                                   //                .writedata
		.m0_write                (timer_s1_agent_m0_write),                                       //                .write
		.rp_endofpacket          (timer_s1_agent_rp_endofpacket),                                 //              rp.endofpacket
		.rp_ready                (timer_s1_agent_rp_ready),                                       //                .ready
		.rp_valid                (timer_s1_agent_rp_valid),                                       //                .valid
		.rp_data                 (timer_s1_agent_rp_data),                                        //                .data
		.rp_startofpacket        (timer_s1_agent_rp_startofpacket),                               //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                       //                .channel
		.rf_sink_ready           (timer_s1_agent_rsp_fifo_out_ready),                             //         rf_sink.ready
		.rf_sink_valid           (timer_s1_agent_rsp_fifo_out_valid),                             //                .valid
		.rf_sink_startofpacket   (timer_s1_agent_rsp_fifo_out_startofpacket),                     //                .startofpacket
		.rf_sink_endofpacket     (timer_s1_agent_rsp_fifo_out_endofpacket),                       //                .endofpacket
		.rf_sink_data            (timer_s1_agent_rsp_fifo_out_data),                              //                .data
		.rf_source_ready         (timer_s1_agent_rf_source_ready),                                //       rf_source.ready
		.rf_source_valid         (timer_s1_agent_rf_source_valid),                                //                .valid
		.rf_source_startofpacket (timer_s1_agent_rf_source_startofpacket),                        //                .startofpacket
		.rf_source_endofpacket   (timer_s1_agent_rf_source_endofpacket),                          //                .endofpacket
		.rf_source_data          (timer_s1_agent_rf_source_data),                                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (timer_s1_agent_rdata_fifo_src_ready),                           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_s1_agent_rdata_fifo_src_valid),                           //                .valid
		.rdata_fifo_src_data     (timer_s1_agent_rdata_fifo_src_data),                            //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rsp_fifo (
		.clk               (altpll_sys_c2_clk),                                             //       clk.clk
		.reset             (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_s1_agent_rf_source_data),                                 //        in.data
		.in_valid          (timer_s1_agent_rf_source_valid),                                //          .valid
		.in_ready          (timer_s1_agent_rf_source_ready),                                //          .ready
		.in_startofpacket  (timer_s1_agent_rf_source_startofpacket),                        //          .startofpacket
		.in_endofpacket    (timer_s1_agent_rf_source_endofpacket),                          //          .endofpacket
		.out_data          (timer_s1_agent_rsp_fifo_out_data),                              //       out.data
		.out_valid         (timer_s1_agent_rsp_fifo_out_valid),                             //          .valid
		.out_ready         (timer_s1_agent_rsp_fifo_out_ready),                             //          .ready
		.out_startofpacket (timer_s1_agent_rsp_fifo_out_startofpacket),                     //          .startofpacket
		.out_endofpacket   (timer_s1_agent_rsp_fifo_out_endofpacket),                       //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_leds_s1_agent (
		.clk                     (altpll_sys_c2_clk),                                             //             clk.clk
		.reset                   (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pio_leds_s1_agent_m0_address),                                  //              m0.address
		.m0_burstcount           (pio_leds_s1_agent_m0_burstcount),                               //                .burstcount
		.m0_byteenable           (pio_leds_s1_agent_m0_byteenable),                               //                .byteenable
		.m0_debugaccess          (pio_leds_s1_agent_m0_debugaccess),                              //                .debugaccess
		.m0_lock                 (pio_leds_s1_agent_m0_lock),                                     //                .lock
		.m0_readdata             (pio_leds_s1_agent_m0_readdata),                                 //                .readdata
		.m0_readdatavalid        (pio_leds_s1_agent_m0_readdatavalid),                            //                .readdatavalid
		.m0_read                 (pio_leds_s1_agent_m0_read),                                     //                .read
		.m0_waitrequest          (pio_leds_s1_agent_m0_waitrequest),                              //                .waitrequest
		.m0_writedata            (pio_leds_s1_agent_m0_writedata),                                //                .writedata
		.m0_write                (pio_leds_s1_agent_m0_write),                                    //                .write
		.rp_endofpacket          (pio_leds_s1_agent_rp_endofpacket),                              //              rp.endofpacket
		.rp_ready                (pio_leds_s1_agent_rp_ready),                                    //                .ready
		.rp_valid                (pio_leds_s1_agent_rp_valid),                                    //                .valid
		.rp_data                 (pio_leds_s1_agent_rp_data),                                     //                .data
		.rp_startofpacket        (pio_leds_s1_agent_rp_startofpacket),                            //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                       //                .channel
		.rf_sink_ready           (pio_leds_s1_agent_rsp_fifo_out_ready),                          //         rf_sink.ready
		.rf_sink_valid           (pio_leds_s1_agent_rsp_fifo_out_valid),                          //                .valid
		.rf_sink_startofpacket   (pio_leds_s1_agent_rsp_fifo_out_startofpacket),                  //                .startofpacket
		.rf_sink_endofpacket     (pio_leds_s1_agent_rsp_fifo_out_endofpacket),                    //                .endofpacket
		.rf_sink_data            (pio_leds_s1_agent_rsp_fifo_out_data),                           //                .data
		.rf_source_ready         (pio_leds_s1_agent_rf_source_ready),                             //       rf_source.ready
		.rf_source_valid         (pio_leds_s1_agent_rf_source_valid),                             //                .valid
		.rf_source_startofpacket (pio_leds_s1_agent_rf_source_startofpacket),                     //                .startofpacket
		.rf_source_endofpacket   (pio_leds_s1_agent_rf_source_endofpacket),                       //                .endofpacket
		.rf_source_data          (pio_leds_s1_agent_rf_source_data),                              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (pio_leds_s1_agent_rdata_fifo_src_ready),                        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_leds_s1_agent_rdata_fifo_src_valid),                        //                .valid
		.rdata_fifo_src_data     (pio_leds_s1_agent_rdata_fifo_src_data),                         //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_leds_s1_agent_rsp_fifo (
		.clk               (altpll_sys_c2_clk),                                             //       clk.clk
		.reset             (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_leds_s1_agent_rf_source_data),                              //        in.data
		.in_valid          (pio_leds_s1_agent_rf_source_valid),                             //          .valid
		.in_ready          (pio_leds_s1_agent_rf_source_ready),                             //          .ready
		.in_startofpacket  (pio_leds_s1_agent_rf_source_startofpacket),                     //          .startofpacket
		.in_endofpacket    (pio_leds_s1_agent_rf_source_endofpacket),                       //          .endofpacket
		.out_data          (pio_leds_s1_agent_rsp_fifo_out_data),                           //       out.data
		.out_valid         (pio_leds_s1_agent_rsp_fifo_out_valid),                          //          .valid
		.out_ready         (pio_leds_s1_agent_rsp_fifo_out_ready),                          //          .ready
		.out_startofpacket (pio_leds_s1_agent_rsp_fifo_out_startofpacket),                  //          .startofpacket
		.out_endofpacket   (pio_leds_s1_agent_rsp_fifo_out_endofpacket),                    //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_key_s1_agent (
		.clk                     (altpll_sys_c2_clk),                                             //             clk.clk
		.reset                   (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pio_key_s1_agent_m0_address),                                   //              m0.address
		.m0_burstcount           (pio_key_s1_agent_m0_burstcount),                                //                .burstcount
		.m0_byteenable           (pio_key_s1_agent_m0_byteenable),                                //                .byteenable
		.m0_debugaccess          (pio_key_s1_agent_m0_debugaccess),                               //                .debugaccess
		.m0_lock                 (pio_key_s1_agent_m0_lock),                                      //                .lock
		.m0_readdata             (pio_key_s1_agent_m0_readdata),                                  //                .readdata
		.m0_readdatavalid        (pio_key_s1_agent_m0_readdatavalid),                             //                .readdatavalid
		.m0_read                 (pio_key_s1_agent_m0_read),                                      //                .read
		.m0_waitrequest          (pio_key_s1_agent_m0_waitrequest),                               //                .waitrequest
		.m0_writedata            (pio_key_s1_agent_m0_writedata),                                 //                .writedata
		.m0_write                (pio_key_s1_agent_m0_write),                                     //                .write
		.rp_endofpacket          (pio_key_s1_agent_rp_endofpacket),                               //              rp.endofpacket
		.rp_ready                (pio_key_s1_agent_rp_ready),                                     //                .ready
		.rp_valid                (pio_key_s1_agent_rp_valid),                                     //                .valid
		.rp_data                 (pio_key_s1_agent_rp_data),                                      //                .data
		.rp_startofpacket        (pio_key_s1_agent_rp_startofpacket),                             //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                       //                .channel
		.rf_sink_ready           (pio_key_s1_agent_rsp_fifo_out_ready),                           //         rf_sink.ready
		.rf_sink_valid           (pio_key_s1_agent_rsp_fifo_out_valid),                           //                .valid
		.rf_sink_startofpacket   (pio_key_s1_agent_rsp_fifo_out_startofpacket),                   //                .startofpacket
		.rf_sink_endofpacket     (pio_key_s1_agent_rsp_fifo_out_endofpacket),                     //                .endofpacket
		.rf_sink_data            (pio_key_s1_agent_rsp_fifo_out_data),                            //                .data
		.rf_source_ready         (pio_key_s1_agent_rf_source_ready),                              //       rf_source.ready
		.rf_source_valid         (pio_key_s1_agent_rf_source_valid),                              //                .valid
		.rf_source_startofpacket (pio_key_s1_agent_rf_source_startofpacket),                      //                .startofpacket
		.rf_source_endofpacket   (pio_key_s1_agent_rf_source_endofpacket),                        //                .endofpacket
		.rf_source_data          (pio_key_s1_agent_rf_source_data),                               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (pio_key_s1_agent_rdata_fifo_src_ready),                         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_key_s1_agent_rdata_fifo_src_valid),                         //                .valid
		.rdata_fifo_src_data     (pio_key_s1_agent_rdata_fifo_src_data),                          //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_key_s1_agent_rsp_fifo (
		.clk               (altpll_sys_c2_clk),                                             //       clk.clk
		.reset             (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_key_s1_agent_rf_source_data),                               //        in.data
		.in_valid          (pio_key_s1_agent_rf_source_valid),                              //          .valid
		.in_ready          (pio_key_s1_agent_rf_source_ready),                              //          .ready
		.in_startofpacket  (pio_key_s1_agent_rf_source_startofpacket),                      //          .startofpacket
		.in_endofpacket    (pio_key_s1_agent_rf_source_endofpacket),                        //          .endofpacket
		.out_data          (pio_key_s1_agent_rsp_fifo_out_data),                            //       out.data
		.out_valid         (pio_key_s1_agent_rsp_fifo_out_valid),                           //          .valid
		.out_ready         (pio_key_s1_agent_rsp_fifo_out_ready),                           //          .ready
		.out_startofpacket (pio_key_s1_agent_rsp_fifo_out_startofpacket),                   //          .startofpacket
		.out_endofpacket   (pio_key_s1_agent_rsp_fifo_out_endofpacket),                     //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_switch_s1_agent (
		.clk                     (altpll_sys_c2_clk),                                             //             clk.clk
		.reset                   (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pio_switch_s1_agent_m0_address),                                //              m0.address
		.m0_burstcount           (pio_switch_s1_agent_m0_burstcount),                             //                .burstcount
		.m0_byteenable           (pio_switch_s1_agent_m0_byteenable),                             //                .byteenable
		.m0_debugaccess          (pio_switch_s1_agent_m0_debugaccess),                            //                .debugaccess
		.m0_lock                 (pio_switch_s1_agent_m0_lock),                                   //                .lock
		.m0_readdata             (pio_switch_s1_agent_m0_readdata),                               //                .readdata
		.m0_readdatavalid        (pio_switch_s1_agent_m0_readdatavalid),                          //                .readdatavalid
		.m0_read                 (pio_switch_s1_agent_m0_read),                                   //                .read
		.m0_waitrequest          (pio_switch_s1_agent_m0_waitrequest),                            //                .waitrequest
		.m0_writedata            (pio_switch_s1_agent_m0_writedata),                              //                .writedata
		.m0_write                (pio_switch_s1_agent_m0_write),                                  //                .write
		.rp_endofpacket          (pio_switch_s1_agent_rp_endofpacket),                            //              rp.endofpacket
		.rp_ready                (pio_switch_s1_agent_rp_ready),                                  //                .ready
		.rp_valid                (pio_switch_s1_agent_rp_valid),                                  //                .valid
		.rp_data                 (pio_switch_s1_agent_rp_data),                                   //                .data
		.rp_startofpacket        (pio_switch_s1_agent_rp_startofpacket),                          //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                       //                .channel
		.rf_sink_ready           (pio_switch_s1_agent_rsp_fifo_out_ready),                        //         rf_sink.ready
		.rf_sink_valid           (pio_switch_s1_agent_rsp_fifo_out_valid),                        //                .valid
		.rf_sink_startofpacket   (pio_switch_s1_agent_rsp_fifo_out_startofpacket),                //                .startofpacket
		.rf_sink_endofpacket     (pio_switch_s1_agent_rsp_fifo_out_endofpacket),                  //                .endofpacket
		.rf_sink_data            (pio_switch_s1_agent_rsp_fifo_out_data),                         //                .data
		.rf_source_ready         (pio_switch_s1_agent_rf_source_ready),                           //       rf_source.ready
		.rf_source_valid         (pio_switch_s1_agent_rf_source_valid),                           //                .valid
		.rf_source_startofpacket (pio_switch_s1_agent_rf_source_startofpacket),                   //                .startofpacket
		.rf_source_endofpacket   (pio_switch_s1_agent_rf_source_endofpacket),                     //                .endofpacket
		.rf_source_data          (pio_switch_s1_agent_rf_source_data),                            //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (pio_switch_s1_agent_rdata_fifo_src_ready),                      //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_switch_s1_agent_rdata_fifo_src_valid),                      //                .valid
		.rdata_fifo_src_data     (pio_switch_s1_agent_rdata_fifo_src_data),                       //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_switch_s1_agent_rsp_fifo (
		.clk               (altpll_sys_c2_clk),                                             //       clk.clk
		.reset             (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_switch_s1_agent_rf_source_data),                            //        in.data
		.in_valid          (pio_switch_s1_agent_rf_source_valid),                           //          .valid
		.in_ready          (pio_switch_s1_agent_rf_source_ready),                           //          .ready
		.in_startofpacket  (pio_switch_s1_agent_rf_source_startofpacket),                   //          .startofpacket
		.in_endofpacket    (pio_switch_s1_agent_rf_source_endofpacket),                     //          .endofpacket
		.out_data          (pio_switch_s1_agent_rsp_fifo_out_data),                         //       out.data
		.out_valid         (pio_switch_s1_agent_rsp_fifo_out_valid),                        //          .valid
		.out_ready         (pio_switch_s1_agent_rsp_fifo_out_ready),                        //          .ready
		.out_startofpacket (pio_switch_s1_agent_rsp_fifo_out_startofpacket),                //          .startofpacket
		.out_endofpacket   (pio_switch_s1_agent_rsp_fifo_out_endofpacket),                  //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) g_sensor_int_s1_agent (
		.clk                     (altpll_sys_c2_clk),                                             //             clk.clk
		.reset                   (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (g_sensor_int_s1_agent_m0_address),                              //              m0.address
		.m0_burstcount           (g_sensor_int_s1_agent_m0_burstcount),                           //                .burstcount
		.m0_byteenable           (g_sensor_int_s1_agent_m0_byteenable),                           //                .byteenable
		.m0_debugaccess          (g_sensor_int_s1_agent_m0_debugaccess),                          //                .debugaccess
		.m0_lock                 (g_sensor_int_s1_agent_m0_lock),                                 //                .lock
		.m0_readdata             (g_sensor_int_s1_agent_m0_readdata),                             //                .readdata
		.m0_readdatavalid        (g_sensor_int_s1_agent_m0_readdatavalid),                        //                .readdatavalid
		.m0_read                 (g_sensor_int_s1_agent_m0_read),                                 //                .read
		.m0_waitrequest          (g_sensor_int_s1_agent_m0_waitrequest),                          //                .waitrequest
		.m0_writedata            (g_sensor_int_s1_agent_m0_writedata),                            //                .writedata
		.m0_write                (g_sensor_int_s1_agent_m0_write),                                //                .write
		.rp_endofpacket          (g_sensor_int_s1_agent_rp_endofpacket),                          //              rp.endofpacket
		.rp_ready                (g_sensor_int_s1_agent_rp_ready),                                //                .ready
		.rp_valid                (g_sensor_int_s1_agent_rp_valid),                                //                .valid
		.rp_data                 (g_sensor_int_s1_agent_rp_data),                                 //                .data
		.rp_startofpacket        (g_sensor_int_s1_agent_rp_startofpacket),                        //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                       //                .channel
		.rf_sink_ready           (g_sensor_int_s1_agent_rsp_fifo_out_ready),                      //         rf_sink.ready
		.rf_sink_valid           (g_sensor_int_s1_agent_rsp_fifo_out_valid),                      //                .valid
		.rf_sink_startofpacket   (g_sensor_int_s1_agent_rsp_fifo_out_startofpacket),              //                .startofpacket
		.rf_sink_endofpacket     (g_sensor_int_s1_agent_rsp_fifo_out_endofpacket),                //                .endofpacket
		.rf_sink_data            (g_sensor_int_s1_agent_rsp_fifo_out_data),                       //                .data
		.rf_source_ready         (g_sensor_int_s1_agent_rf_source_ready),                         //       rf_source.ready
		.rf_source_valid         (g_sensor_int_s1_agent_rf_source_valid),                         //                .valid
		.rf_source_startofpacket (g_sensor_int_s1_agent_rf_source_startofpacket),                 //                .startofpacket
		.rf_source_endofpacket   (g_sensor_int_s1_agent_rf_source_endofpacket),                   //                .endofpacket
		.rf_source_data          (g_sensor_int_s1_agent_rf_source_data),                          //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (g_sensor_int_s1_agent_rdata_fifo_src_ready),                    //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (g_sensor_int_s1_agent_rdata_fifo_src_valid),                    //                .valid
		.rdata_fifo_src_data     (g_sensor_int_s1_agent_rdata_fifo_src_data),                     //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) g_sensor_int_s1_agent_rsp_fifo (
		.clk               (altpll_sys_c2_clk),                                             //       clk.clk
		.reset             (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (g_sensor_int_s1_agent_rf_source_data),                          //        in.data
		.in_valid          (g_sensor_int_s1_agent_rf_source_valid),                         //          .valid
		.in_ready          (g_sensor_int_s1_agent_rf_source_ready),                         //          .ready
		.in_startofpacket  (g_sensor_int_s1_agent_rf_source_startofpacket),                 //          .startofpacket
		.in_endofpacket    (g_sensor_int_s1_agent_rf_source_endofpacket),                   //          .endofpacket
		.out_data          (g_sensor_int_s1_agent_rsp_fifo_out_data),                       //       out.data
		.out_valid         (g_sensor_int_s1_agent_rsp_fifo_out_valid),                      //          .valid
		.out_ready         (g_sensor_int_s1_agent_rsp_fifo_out_ready),                      //          .ready
		.out_startofpacket (g_sensor_int_s1_agent_rsp_fifo_out_startofpacket),              //          .startofpacket
		.out_endofpacket   (g_sensor_int_s1_agent_rsp_fifo_out_endofpacket),                //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_sda_s1_agent (
		.clk                     (altpll_sys_c2_clk),                                             //             clk.clk
		.reset                   (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (i2c_sda_s1_agent_m0_address),                                   //              m0.address
		.m0_burstcount           (i2c_sda_s1_agent_m0_burstcount),                                //                .burstcount
		.m0_byteenable           (i2c_sda_s1_agent_m0_byteenable),                                //                .byteenable
		.m0_debugaccess          (i2c_sda_s1_agent_m0_debugaccess),                               //                .debugaccess
		.m0_lock                 (i2c_sda_s1_agent_m0_lock),                                      //                .lock
		.m0_readdata             (i2c_sda_s1_agent_m0_readdata),                                  //                .readdata
		.m0_readdatavalid        (i2c_sda_s1_agent_m0_readdatavalid),                             //                .readdatavalid
		.m0_read                 (i2c_sda_s1_agent_m0_read),                                      //                .read
		.m0_waitrequest          (i2c_sda_s1_agent_m0_waitrequest),                               //                .waitrequest
		.m0_writedata            (i2c_sda_s1_agent_m0_writedata),                                 //                .writedata
		.m0_write                (i2c_sda_s1_agent_m0_write),                                     //                .write
		.rp_endofpacket          (i2c_sda_s1_agent_rp_endofpacket),                               //              rp.endofpacket
		.rp_ready                (i2c_sda_s1_agent_rp_ready),                                     //                .ready
		.rp_valid                (i2c_sda_s1_agent_rp_valid),                                     //                .valid
		.rp_data                 (i2c_sda_s1_agent_rp_data),                                      //                .data
		.rp_startofpacket        (i2c_sda_s1_agent_rp_startofpacket),                             //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                       //                .channel
		.rf_sink_ready           (i2c_sda_s1_agent_rsp_fifo_out_ready),                           //         rf_sink.ready
		.rf_sink_valid           (i2c_sda_s1_agent_rsp_fifo_out_valid),                           //                .valid
		.rf_sink_startofpacket   (i2c_sda_s1_agent_rsp_fifo_out_startofpacket),                   //                .startofpacket
		.rf_sink_endofpacket     (i2c_sda_s1_agent_rsp_fifo_out_endofpacket),                     //                .endofpacket
		.rf_sink_data            (i2c_sda_s1_agent_rsp_fifo_out_data),                            //                .data
		.rf_source_ready         (i2c_sda_s1_agent_rf_source_ready),                              //       rf_source.ready
		.rf_source_valid         (i2c_sda_s1_agent_rf_source_valid),                              //                .valid
		.rf_source_startofpacket (i2c_sda_s1_agent_rf_source_startofpacket),                      //                .startofpacket
		.rf_source_endofpacket   (i2c_sda_s1_agent_rf_source_endofpacket),                        //                .endofpacket
		.rf_source_data          (i2c_sda_s1_agent_rf_source_data),                               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (i2c_sda_s1_agent_rdata_fifo_src_ready),                         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_sda_s1_agent_rdata_fifo_src_valid),                         //                .valid
		.rdata_fifo_src_data     (i2c_sda_s1_agent_rdata_fifo_src_data),                          //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_sda_s1_agent_rsp_fifo (
		.clk               (altpll_sys_c2_clk),                                             //       clk.clk
		.reset             (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (i2c_sda_s1_agent_rf_source_data),                               //        in.data
		.in_valid          (i2c_sda_s1_agent_rf_source_valid),                              //          .valid
		.in_ready          (i2c_sda_s1_agent_rf_source_ready),                              //          .ready
		.in_startofpacket  (i2c_sda_s1_agent_rf_source_startofpacket),                      //          .startofpacket
		.in_endofpacket    (i2c_sda_s1_agent_rf_source_endofpacket),                        //          .endofpacket
		.out_data          (i2c_sda_s1_agent_rsp_fifo_out_data),                            //       out.data
		.out_valid         (i2c_sda_s1_agent_rsp_fifo_out_valid),                           //          .valid
		.out_ready         (i2c_sda_s1_agent_rsp_fifo_out_ready),                           //          .ready
		.out_startofpacket (i2c_sda_s1_agent_rsp_fifo_out_startofpacket),                   //          .startofpacket
		.out_endofpacket   (i2c_sda_s1_agent_rsp_fifo_out_endofpacket),                     //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_scl_s1_agent (
		.clk                     (altpll_sys_c2_clk),                                             //             clk.clk
		.reset                   (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (i2c_scl_s1_agent_m0_address),                                   //              m0.address
		.m0_burstcount           (i2c_scl_s1_agent_m0_burstcount),                                //                .burstcount
		.m0_byteenable           (i2c_scl_s1_agent_m0_byteenable),                                //                .byteenable
		.m0_debugaccess          (i2c_scl_s1_agent_m0_debugaccess),                               //                .debugaccess
		.m0_lock                 (i2c_scl_s1_agent_m0_lock),                                      //                .lock
		.m0_readdata             (i2c_scl_s1_agent_m0_readdata),                                  //                .readdata
		.m0_readdatavalid        (i2c_scl_s1_agent_m0_readdatavalid),                             //                .readdatavalid
		.m0_read                 (i2c_scl_s1_agent_m0_read),                                      //                .read
		.m0_waitrequest          (i2c_scl_s1_agent_m0_waitrequest),                               //                .waitrequest
		.m0_writedata            (i2c_scl_s1_agent_m0_writedata),                                 //                .writedata
		.m0_write                (i2c_scl_s1_agent_m0_write),                                     //                .write
		.rp_endofpacket          (i2c_scl_s1_agent_rp_endofpacket),                               //              rp.endofpacket
		.rp_ready                (i2c_scl_s1_agent_rp_ready),                                     //                .ready
		.rp_valid                (i2c_scl_s1_agent_rp_valid),                                     //                .valid
		.rp_data                 (i2c_scl_s1_agent_rp_data),                                      //                .data
		.rp_startofpacket        (i2c_scl_s1_agent_rp_startofpacket),                             //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                       //                .channel
		.rf_sink_ready           (i2c_scl_s1_agent_rsp_fifo_out_ready),                           //         rf_sink.ready
		.rf_sink_valid           (i2c_scl_s1_agent_rsp_fifo_out_valid),                           //                .valid
		.rf_sink_startofpacket   (i2c_scl_s1_agent_rsp_fifo_out_startofpacket),                   //                .startofpacket
		.rf_sink_endofpacket     (i2c_scl_s1_agent_rsp_fifo_out_endofpacket),                     //                .endofpacket
		.rf_sink_data            (i2c_scl_s1_agent_rsp_fifo_out_data),                            //                .data
		.rf_source_ready         (i2c_scl_s1_agent_rf_source_ready),                              //       rf_source.ready
		.rf_source_valid         (i2c_scl_s1_agent_rf_source_valid),                              //                .valid
		.rf_source_startofpacket (i2c_scl_s1_agent_rf_source_startofpacket),                      //                .startofpacket
		.rf_source_endofpacket   (i2c_scl_s1_agent_rf_source_endofpacket),                        //                .endofpacket
		.rf_source_data          (i2c_scl_s1_agent_rf_source_data),                               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (i2c_scl_s1_agent_rdata_fifo_src_ready),                         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_scl_s1_agent_rdata_fifo_src_valid),                         //                .valid
		.rdata_fifo_src_data     (i2c_scl_s1_agent_rdata_fifo_src_data),                          //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_scl_s1_agent_rsp_fifo (
		.clk               (altpll_sys_c2_clk),                                             //       clk.clk
		.reset             (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (i2c_scl_s1_agent_rf_source_data),                               //        in.data
		.in_valid          (i2c_scl_s1_agent_rf_source_valid),                              //          .valid
		.in_ready          (i2c_scl_s1_agent_rf_source_ready),                              //          .ready
		.in_startofpacket  (i2c_scl_s1_agent_rf_source_startofpacket),                      //          .startofpacket
		.in_endofpacket    (i2c_scl_s1_agent_rf_source_endofpacket),                        //          .endofpacket
		.out_data          (i2c_scl_s1_agent_rsp_fifo_out_data),                            //       out.data
		.out_valid         (i2c_scl_s1_agent_rsp_fifo_out_valid),                           //          .valid
		.out_ready         (i2c_scl_s1_agent_rsp_fifo_out_ready),                           //          .ready
		.out_startofpacket (i2c_scl_s1_agent_rsp_fifo_out_startofpacket),                   //          .startofpacket
		.out_endofpacket   (i2c_scl_s1_agent_rsp_fifo_out_endofpacket),                     //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ext_sensor_int_s1_agent (
		.clk                     (altpll_sys_c2_clk),                                             //             clk.clk
		.reset                   (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ext_sensor_int_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (ext_sensor_int_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (ext_sensor_int_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (ext_sensor_int_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (ext_sensor_int_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (ext_sensor_int_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (ext_sensor_int_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (ext_sensor_int_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (ext_sensor_int_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (ext_sensor_int_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (ext_sensor_int_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (ext_sensor_int_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (ext_sensor_int_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (ext_sensor_int_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (ext_sensor_int_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (ext_sensor_int_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                       //                .channel
		.rf_sink_ready           (ext_sensor_int_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (ext_sensor_int_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (ext_sensor_int_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (ext_sensor_int_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (ext_sensor_int_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (ext_sensor_int_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (ext_sensor_int_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (ext_sensor_int_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (ext_sensor_int_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (ext_sensor_int_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (ext_sensor_int_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ext_sensor_int_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (ext_sensor_int_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ext_sensor_int_s1_agent_rsp_fifo (
		.clk               (altpll_sys_c2_clk),                                             //       clk.clk
		.reset             (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ext_sensor_int_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (ext_sensor_int_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (ext_sensor_int_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (ext_sensor_int_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (ext_sensor_int_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (ext_sensor_int_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (ext_sensor_int_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (ext_sensor_int_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (ext_sensor_int_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (ext_sensor_int_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_ext_sda_s1_agent (
		.clk                     (altpll_sys_c2_clk),                                             //             clk.clk
		.reset                   (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (i2c_ext_sda_s1_agent_m0_address),                               //              m0.address
		.m0_burstcount           (i2c_ext_sda_s1_agent_m0_burstcount),                            //                .burstcount
		.m0_byteenable           (i2c_ext_sda_s1_agent_m0_byteenable),                            //                .byteenable
		.m0_debugaccess          (i2c_ext_sda_s1_agent_m0_debugaccess),                           //                .debugaccess
		.m0_lock                 (i2c_ext_sda_s1_agent_m0_lock),                                  //                .lock
		.m0_readdata             (i2c_ext_sda_s1_agent_m0_readdata),                              //                .readdata
		.m0_readdatavalid        (i2c_ext_sda_s1_agent_m0_readdatavalid),                         //                .readdatavalid
		.m0_read                 (i2c_ext_sda_s1_agent_m0_read),                                  //                .read
		.m0_waitrequest          (i2c_ext_sda_s1_agent_m0_waitrequest),                           //                .waitrequest
		.m0_writedata            (i2c_ext_sda_s1_agent_m0_writedata),                             //                .writedata
		.m0_write                (i2c_ext_sda_s1_agent_m0_write),                                 //                .write
		.rp_endofpacket          (i2c_ext_sda_s1_agent_rp_endofpacket),                           //              rp.endofpacket
		.rp_ready                (i2c_ext_sda_s1_agent_rp_ready),                                 //                .ready
		.rp_valid                (i2c_ext_sda_s1_agent_rp_valid),                                 //                .valid
		.rp_data                 (i2c_ext_sda_s1_agent_rp_data),                                  //                .data
		.rp_startofpacket        (i2c_ext_sda_s1_agent_rp_startofpacket),                         //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                       //                .channel
		.rf_sink_ready           (i2c_ext_sda_s1_agent_rsp_fifo_out_ready),                       //         rf_sink.ready
		.rf_sink_valid           (i2c_ext_sda_s1_agent_rsp_fifo_out_valid),                       //                .valid
		.rf_sink_startofpacket   (i2c_ext_sda_s1_agent_rsp_fifo_out_startofpacket),               //                .startofpacket
		.rf_sink_endofpacket     (i2c_ext_sda_s1_agent_rsp_fifo_out_endofpacket),                 //                .endofpacket
		.rf_sink_data            (i2c_ext_sda_s1_agent_rsp_fifo_out_data),                        //                .data
		.rf_source_ready         (i2c_ext_sda_s1_agent_rf_source_ready),                          //       rf_source.ready
		.rf_source_valid         (i2c_ext_sda_s1_agent_rf_source_valid),                          //                .valid
		.rf_source_startofpacket (i2c_ext_sda_s1_agent_rf_source_startofpacket),                  //                .startofpacket
		.rf_source_endofpacket   (i2c_ext_sda_s1_agent_rf_source_endofpacket),                    //                .endofpacket
		.rf_source_data          (i2c_ext_sda_s1_agent_rf_source_data),                           //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (i2c_ext_sda_s1_agent_rdata_fifo_src_ready),                     //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_ext_sda_s1_agent_rdata_fifo_src_valid),                     //                .valid
		.rdata_fifo_src_data     (i2c_ext_sda_s1_agent_rdata_fifo_src_data),                      //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_ext_sda_s1_agent_rsp_fifo (
		.clk               (altpll_sys_c2_clk),                                             //       clk.clk
		.reset             (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (i2c_ext_sda_s1_agent_rf_source_data),                           //        in.data
		.in_valid          (i2c_ext_sda_s1_agent_rf_source_valid),                          //          .valid
		.in_ready          (i2c_ext_sda_s1_agent_rf_source_ready),                          //          .ready
		.in_startofpacket  (i2c_ext_sda_s1_agent_rf_source_startofpacket),                  //          .startofpacket
		.in_endofpacket    (i2c_ext_sda_s1_agent_rf_source_endofpacket),                    //          .endofpacket
		.out_data          (i2c_ext_sda_s1_agent_rsp_fifo_out_data),                        //       out.data
		.out_valid         (i2c_ext_sda_s1_agent_rsp_fifo_out_valid),                       //          .valid
		.out_ready         (i2c_ext_sda_s1_agent_rsp_fifo_out_ready),                       //          .ready
		.out_startofpacket (i2c_ext_sda_s1_agent_rsp_fifo_out_startofpacket),               //          .startofpacket
		.out_endofpacket   (i2c_ext_sda_s1_agent_rsp_fifo_out_endofpacket),                 //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) xbee_uart_s1_agent (
		.clk                     (altpll_sys_c2_clk),                                             //             clk.clk
		.reset                   (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (xbee_uart_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (xbee_uart_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (xbee_uart_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (xbee_uart_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (xbee_uart_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (xbee_uart_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (xbee_uart_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (xbee_uart_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (xbee_uart_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (xbee_uart_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (xbee_uart_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (xbee_uart_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (xbee_uart_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (xbee_uart_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (xbee_uart_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (xbee_uart_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                                       //                .channel
		.rf_sink_ready           (xbee_uart_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (xbee_uart_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (xbee_uart_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (xbee_uart_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (xbee_uart_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (xbee_uart_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (xbee_uart_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (xbee_uart_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (xbee_uart_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (xbee_uart_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (xbee_uart_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (xbee_uart_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (xbee_uart_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) xbee_uart_s1_agent_rsp_fifo (
		.clk               (altpll_sys_c2_clk),                                             //       clk.clk
		.reset             (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (xbee_uart_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (xbee_uart_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (xbee_uart_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (xbee_uart_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (xbee_uart_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (xbee_uart_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (xbee_uart_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (xbee_uart_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (xbee_uart_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (xbee_uart_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (57),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (13),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) adc_spi_int_spi_control_port_agent (
		.clk                     (altpll_sys_c2_clk),                                             //             clk.clk
		.reset                   (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (adc_spi_int_spi_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (adc_spi_int_spi_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (adc_spi_int_spi_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (adc_spi_int_spi_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (adc_spi_int_spi_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (adc_spi_int_spi_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (adc_spi_int_spi_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (adc_spi_int_spi_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (adc_spi_int_spi_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (adc_spi_int_spi_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (adc_spi_int_spi_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (adc_spi_int_spi_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (adc_spi_int_spi_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (adc_spi_int_spi_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (adc_spi_int_spi_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (adc_spi_int_spi_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_012_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                                       //                .channel
		.rf_sink_ready           (adc_spi_int_spi_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (adc_spi_int_spi_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (adc_spi_int_spi_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (adc_spi_int_spi_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (adc_spi_int_spi_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (adc_spi_int_spi_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (adc_spi_int_spi_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (adc_spi_int_spi_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (adc_spi_int_spi_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (adc_spi_int_spi_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (adc_spi_int_spi_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (adc_spi_int_spi_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (adc_spi_int_spi_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_spi_int_spi_control_port_agent_rsp_fifo (
		.clk               (altpll_sys_c2_clk),                                             //       clk.clk
		.reset             (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (adc_spi_int_spi_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (adc_spi_int_spi_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (adc_spi_int_spi_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (adc_spi_int_spi_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (adc_spi_int_spi_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (adc_spi_int_spi_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (adc_spi_int_spi_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (adc_spi_int_spi_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (adc_spi_int_spi_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (adc_spi_int_spi_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	DE0_nano_system_mm_interconnect_1_router router (
		.sink_ready         (clock_crossing_bridge_io_m0_agent_cp_ready),                    //      sink.ready
		.sink_valid         (clock_crossing_bridge_io_m0_agent_cp_valid),                    //          .valid
		.sink_data          (clock_crossing_bridge_io_m0_agent_cp_data),                     //          .data
		.sink_startofpacket (clock_crossing_bridge_io_m0_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (clock_crossing_bridge_io_m0_agent_cp_endofpacket),              //          .endofpacket
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                              //       src.ready
		.src_valid          (router_src_valid),                                              //          .valid
		.src_data           (router_src_data),                                               //          .data
		.src_channel        (router_src_channel),                                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                         //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (sysid_qsys_control_slave_agent_rp_ready),                       //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_agent_rp_valid),                       //          .valid
		.sink_data          (sysid_qsys_control_slave_agent_rp_data),                        //          .data
		.sink_startofpacket (sysid_qsys_control_slave_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                          //       src.ready
		.src_valid          (router_001_src_valid),                                          //          .valid
		.src_data           (router_001_src_data),                                           //          .data
		.src_channel        (router_001_src_channel),                                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_router_001 router_002 (
		.sink_ready         (epcs_epcs_control_port_agent_rp_ready),                         //      sink.ready
		.sink_valid         (epcs_epcs_control_port_agent_rp_valid),                         //          .valid
		.sink_data          (epcs_epcs_control_port_agent_rp_data),                          //          .data
		.sink_startofpacket (epcs_epcs_control_port_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (epcs_epcs_control_port_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                          //       src.ready
		.src_valid          (router_002_src_valid),                                          //          .valid
		.src_data           (router_002_src_data),                                           //          .data
		.src_channel        (router_002_src_channel),                                        //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_router_001 router_003 (
		.sink_ready         (timer_s1_agent_rp_ready),                                       //      sink.ready
		.sink_valid         (timer_s1_agent_rp_valid),                                       //          .valid
		.sink_data          (timer_s1_agent_rp_data),                                        //          .data
		.sink_startofpacket (timer_s1_agent_rp_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (timer_s1_agent_rp_endofpacket),                                 //          .endofpacket
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                          //       src.ready
		.src_valid          (router_003_src_valid),                                          //          .valid
		.src_data           (router_003_src_data),                                           //          .data
		.src_channel        (router_003_src_channel),                                        //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_router_001 router_004 (
		.sink_ready         (pio_leds_s1_agent_rp_ready),                                    //      sink.ready
		.sink_valid         (pio_leds_s1_agent_rp_valid),                                    //          .valid
		.sink_data          (pio_leds_s1_agent_rp_data),                                     //          .data
		.sink_startofpacket (pio_leds_s1_agent_rp_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (pio_leds_s1_agent_rp_endofpacket),                              //          .endofpacket
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                          //       src.ready
		.src_valid          (router_004_src_valid),                                          //          .valid
		.src_data           (router_004_src_data),                                           //          .data
		.src_channel        (router_004_src_channel),                                        //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_router_001 router_005 (
		.sink_ready         (pio_key_s1_agent_rp_ready),                                     //      sink.ready
		.sink_valid         (pio_key_s1_agent_rp_valid),                                     //          .valid
		.sink_data          (pio_key_s1_agent_rp_data),                                      //          .data
		.sink_startofpacket (pio_key_s1_agent_rp_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (pio_key_s1_agent_rp_endofpacket),                               //          .endofpacket
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                          //       src.ready
		.src_valid          (router_005_src_valid),                                          //          .valid
		.src_data           (router_005_src_data),                                           //          .data
		.src_channel        (router_005_src_channel),                                        //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_router_001 router_006 (
		.sink_ready         (pio_switch_s1_agent_rp_ready),                                  //      sink.ready
		.sink_valid         (pio_switch_s1_agent_rp_valid),                                  //          .valid
		.sink_data          (pio_switch_s1_agent_rp_data),                                   //          .data
		.sink_startofpacket (pio_switch_s1_agent_rp_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (pio_switch_s1_agent_rp_endofpacket),                            //          .endofpacket
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                          //       src.ready
		.src_valid          (router_006_src_valid),                                          //          .valid
		.src_data           (router_006_src_data),                                           //          .data
		.src_channel        (router_006_src_channel),                                        //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_router_001 router_007 (
		.sink_ready         (g_sensor_int_s1_agent_rp_ready),                                //      sink.ready
		.sink_valid         (g_sensor_int_s1_agent_rp_valid),                                //          .valid
		.sink_data          (g_sensor_int_s1_agent_rp_data),                                 //          .data
		.sink_startofpacket (g_sensor_int_s1_agent_rp_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (g_sensor_int_s1_agent_rp_endofpacket),                          //          .endofpacket
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                          //       src.ready
		.src_valid          (router_007_src_valid),                                          //          .valid
		.src_data           (router_007_src_data),                                           //          .data
		.src_channel        (router_007_src_channel),                                        //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_router_001 router_008 (
		.sink_ready         (i2c_sda_s1_agent_rp_ready),                                     //      sink.ready
		.sink_valid         (i2c_sda_s1_agent_rp_valid),                                     //          .valid
		.sink_data          (i2c_sda_s1_agent_rp_data),                                      //          .data
		.sink_startofpacket (i2c_sda_s1_agent_rp_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (i2c_sda_s1_agent_rp_endofpacket),                               //          .endofpacket
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                          //       src.ready
		.src_valid          (router_008_src_valid),                                          //          .valid
		.src_data           (router_008_src_data),                                           //          .data
		.src_channel        (router_008_src_channel),                                        //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_router_001 router_009 (
		.sink_ready         (i2c_scl_s1_agent_rp_ready),                                     //      sink.ready
		.sink_valid         (i2c_scl_s1_agent_rp_valid),                                     //          .valid
		.sink_data          (i2c_scl_s1_agent_rp_data),                                      //          .data
		.sink_startofpacket (i2c_scl_s1_agent_rp_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (i2c_scl_s1_agent_rp_endofpacket),                               //          .endofpacket
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                          //       src.ready
		.src_valid          (router_009_src_valid),                                          //          .valid
		.src_data           (router_009_src_data),                                           //          .data
		.src_channel        (router_009_src_channel),                                        //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_router_001 router_010 (
		.sink_ready         (ext_sensor_int_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (ext_sensor_int_s1_agent_rp_valid),                              //          .valid
		.sink_data          (ext_sensor_int_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (ext_sensor_int_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (ext_sensor_int_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                          //       src.ready
		.src_valid          (router_010_src_valid),                                          //          .valid
		.src_data           (router_010_src_data),                                           //          .data
		.src_channel        (router_010_src_channel),                                        //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_router_001 router_011 (
		.sink_ready         (i2c_ext_sda_s1_agent_rp_ready),                                 //      sink.ready
		.sink_valid         (i2c_ext_sda_s1_agent_rp_valid),                                 //          .valid
		.sink_data          (i2c_ext_sda_s1_agent_rp_data),                                  //          .data
		.sink_startofpacket (i2c_ext_sda_s1_agent_rp_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (i2c_ext_sda_s1_agent_rp_endofpacket),                           //          .endofpacket
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                          //       src.ready
		.src_valid          (router_011_src_valid),                                          //          .valid
		.src_data           (router_011_src_data),                                           //          .data
		.src_channel        (router_011_src_channel),                                        //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_router_001 router_012 (
		.sink_ready         (xbee_uart_s1_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (xbee_uart_s1_agent_rp_valid),                                   //          .valid
		.sink_data          (xbee_uart_s1_agent_rp_data),                                    //          .data
		.sink_startofpacket (xbee_uart_s1_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (xbee_uart_s1_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                          //       src.ready
		.src_valid          (router_012_src_valid),                                          //          .valid
		.src_data           (router_012_src_data),                                           //          .data
		.src_channel        (router_012_src_channel),                                        //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_router_001 router_013 (
		.sink_ready         (adc_spi_int_spi_control_port_agent_rp_ready),                   //      sink.ready
		.sink_valid         (adc_spi_int_spi_control_port_agent_rp_valid),                   //          .valid
		.sink_data          (adc_spi_int_spi_control_port_agent_rp_data),                    //          .data
		.sink_startofpacket (adc_spi_int_spi_control_port_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (adc_spi_int_spi_control_port_agent_rp_endofpacket),             //          .endofpacket
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                          //       src.ready
		.src_valid          (router_013_src_valid),                                          //          .valid
		.src_data           (router_013_src_data),                                           //          .data
		.src_channel        (router_013_src_channel),                                        //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                                     //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (71),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (67),
		.PKT_BYTE_CNT_H            (56),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (88),
		.ST_CHANNEL_W              (13),
		.VALID_WIDTH               (13),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) clock_crossing_bridge_io_m0_limiter (
		.clk                    (altpll_sys_c2_clk),                                             //       clk.clk
		.reset                  (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                              //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                              //          .valid
		.cmd_sink_data          (router_src_data),                                               //          .data
		.cmd_sink_channel       (router_src_channel),                                            //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                      //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                        //          .endofpacket
		.cmd_src_ready          (clock_crossing_bridge_io_m0_limiter_cmd_src_ready),             //   cmd_src.ready
		.cmd_src_data           (clock_crossing_bridge_io_m0_limiter_cmd_src_data),              //          .data
		.cmd_src_channel        (clock_crossing_bridge_io_m0_limiter_cmd_src_channel),           //          .channel
		.cmd_src_startofpacket  (clock_crossing_bridge_io_m0_limiter_cmd_src_startofpacket),     //          .startofpacket
		.cmd_src_endofpacket    (clock_crossing_bridge_io_m0_limiter_cmd_src_endofpacket),       //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                             //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                             //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                           //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                              //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                     //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                       //          .endofpacket
		.rsp_src_ready          (clock_crossing_bridge_io_m0_limiter_rsp_src_ready),             //   rsp_src.ready
		.rsp_src_valid          (clock_crossing_bridge_io_m0_limiter_rsp_src_valid),             //          .valid
		.rsp_src_data           (clock_crossing_bridge_io_m0_limiter_rsp_src_data),              //          .data
		.rsp_src_channel        (clock_crossing_bridge_io_m0_limiter_rsp_src_channel),           //          .channel
		.rsp_src_startofpacket  (clock_crossing_bridge_io_m0_limiter_rsp_src_startofpacket),     //          .startofpacket
		.rsp_src_endofpacket    (clock_crossing_bridge_io_m0_limiter_rsp_src_endofpacket),       //          .endofpacket
		.cmd_src_valid          (clock_crossing_bridge_io_m0_limiter_cmd_valid_data)             // cmd_valid.data
	);

	DE0_nano_system_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                 (altpll_sys_c2_clk),                                             //        clk.clk
		.reset               (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (clock_crossing_bridge_io_m0_limiter_cmd_src_ready),             //       sink.ready
		.sink_channel        (clock_crossing_bridge_io_m0_limiter_cmd_src_channel),           //           .channel
		.sink_data           (clock_crossing_bridge_io_m0_limiter_cmd_src_data),              //           .data
		.sink_startofpacket  (clock_crossing_bridge_io_m0_limiter_cmd_src_startofpacket),     //           .startofpacket
		.sink_endofpacket    (clock_crossing_bridge_io_m0_limiter_cmd_src_endofpacket),       //           .endofpacket
		.sink_valid          (clock_crossing_bridge_io_m0_limiter_cmd_valid_data),            // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                          //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                          //           .valid
		.src0_data           (cmd_demux_src0_data),                                           //           .data
		.src0_channel        (cmd_demux_src0_channel),                                        //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                                  //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                                    //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                          //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                          //           .valid
		.src1_data           (cmd_demux_src1_data),                                           //           .data
		.src1_channel        (cmd_demux_src1_channel),                                        //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                                  //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                                    //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                          //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                          //           .valid
		.src2_data           (cmd_demux_src2_data),                                           //           .data
		.src2_channel        (cmd_demux_src2_channel),                                        //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                                  //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                                    //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                          //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                          //           .valid
		.src3_data           (cmd_demux_src3_data),                                           //           .data
		.src3_channel        (cmd_demux_src3_channel),                                        //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                                  //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                                    //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                          //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                          //           .valid
		.src4_data           (cmd_demux_src4_data),                                           //           .data
		.src4_channel        (cmd_demux_src4_channel),                                        //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                                  //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                                    //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                          //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                          //           .valid
		.src5_data           (cmd_demux_src5_data),                                           //           .data
		.src5_channel        (cmd_demux_src5_channel),                                        //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                                  //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                                    //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                          //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                          //           .valid
		.src6_data           (cmd_demux_src6_data),                                           //           .data
		.src6_channel        (cmd_demux_src6_channel),                                        //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                                  //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                                    //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                          //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                          //           .valid
		.src7_data           (cmd_demux_src7_data),                                           //           .data
		.src7_channel        (cmd_demux_src7_channel),                                        //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                                  //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                                    //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                          //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                          //           .valid
		.src8_data           (cmd_demux_src8_data),                                           //           .data
		.src8_channel        (cmd_demux_src8_channel),                                        //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                                  //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                                    //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                          //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                          //           .valid
		.src9_data           (cmd_demux_src9_data),                                           //           .data
		.src9_channel        (cmd_demux_src9_channel),                                        //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                                  //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                                    //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                         //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                         //           .valid
		.src10_data          (cmd_demux_src10_data),                                          //           .data
		.src10_channel       (cmd_demux_src10_channel),                                       //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                                 //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                                   //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                         //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                         //           .valid
		.src11_data          (cmd_demux_src11_data),                                          //           .data
		.src11_channel       (cmd_demux_src11_channel),                                       //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                                 //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                                   //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                         //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                         //           .valid
		.src12_data          (cmd_demux_src12_data),                                          //           .data
		.src12_channel       (cmd_demux_src12_channel),                                       //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                                 //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket)                                    //           .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (altpll_sys_c2_clk),                                             //       clk.clk
		.reset               (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                                             //          .valid
		.src_data            (cmd_mux_src_data),                                              //          .data
		.src_channel         (cmd_mux_src_channel),                                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                       //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                          //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                          //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                        //          .channel
		.sink0_data          (cmd_demux_src0_data),                                           //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (altpll_sys_c2_clk),                                             //       clk.clk
		.reset               (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                         //          .valid
		.src_data            (cmd_mux_001_src_data),                                          //          .data
		.src_channel         (cmd_mux_001_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                          //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                          //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                        //          .channel
		.sink0_data          (cmd_demux_src1_data),                                           //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (altpll_sys_c2_clk),                                             //       clk.clk
		.reset               (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                         //          .valid
		.src_data            (cmd_mux_002_src_data),                                          //          .data
		.src_channel         (cmd_mux_002_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                          //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                          //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                        //          .channel
		.sink0_data          (cmd_demux_src2_data),                                           //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (altpll_sys_c2_clk),                                             //       clk.clk
		.reset               (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                         //          .valid
		.src_data            (cmd_mux_003_src_data),                                          //          .data
		.src_channel         (cmd_mux_003_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                          //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                          //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                        //          .channel
		.sink0_data          (cmd_demux_src3_data),                                           //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_cmd_mux cmd_mux_004 (
		.clk                 (altpll_sys_c2_clk),                                             //       clk.clk
		.reset               (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                         //          .valid
		.src_data            (cmd_mux_004_src_data),                                          //          .data
		.src_channel         (cmd_mux_004_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                          //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                          //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                        //          .channel
		.sink0_data          (cmd_demux_src4_data),                                           //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_cmd_mux cmd_mux_005 (
		.clk                 (altpll_sys_c2_clk),                                             //       clk.clk
		.reset               (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                         //          .valid
		.src_data            (cmd_mux_005_src_data),                                          //          .data
		.src_channel         (cmd_mux_005_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                          //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                          //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                        //          .channel
		.sink0_data          (cmd_demux_src5_data),                                           //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_cmd_mux cmd_mux_006 (
		.clk                 (altpll_sys_c2_clk),                                             //       clk.clk
		.reset               (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                         //          .valid
		.src_data            (cmd_mux_006_src_data),                                          //          .data
		.src_channel         (cmd_mux_006_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                                          //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                                          //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                                        //          .channel
		.sink0_data          (cmd_demux_src6_data),                                           //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_cmd_mux cmd_mux_007 (
		.clk                 (altpll_sys_c2_clk),                                             //       clk.clk
		.reset               (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                         //          .valid
		.src_data            (cmd_mux_007_src_data),                                          //          .data
		.src_channel         (cmd_mux_007_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                                          //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                                          //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                                        //          .channel
		.sink0_data          (cmd_demux_src7_data),                                           //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_cmd_mux cmd_mux_008 (
		.clk                 (altpll_sys_c2_clk),                                             //       clk.clk
		.reset               (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                         //          .valid
		.src_data            (cmd_mux_008_src_data),                                          //          .data
		.src_channel         (cmd_mux_008_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                                          //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                                          //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                                        //          .channel
		.sink0_data          (cmd_demux_src8_data),                                           //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_cmd_mux cmd_mux_009 (
		.clk                 (altpll_sys_c2_clk),                                             //       clk.clk
		.reset               (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                         //          .valid
		.src_data            (cmd_mux_009_src_data),                                          //          .data
		.src_channel         (cmd_mux_009_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                                          //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                                          //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                                        //          .channel
		.sink0_data          (cmd_demux_src9_data),                                           //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_cmd_mux cmd_mux_010 (
		.clk                 (altpll_sys_c2_clk),                                             //       clk.clk
		.reset               (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                         //          .valid
		.src_data            (cmd_mux_010_src_data),                                          //          .data
		.src_channel         (cmd_mux_010_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                                         //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                                         //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                                       //          .channel
		.sink0_data          (cmd_demux_src10_data),                                          //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                                    //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_cmd_mux cmd_mux_011 (
		.clk                 (altpll_sys_c2_clk),                                             //       clk.clk
		.reset               (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                         //          .valid
		.src_data            (cmd_mux_011_src_data),                                          //          .data
		.src_channel         (cmd_mux_011_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                                         //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                                         //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                                       //          .channel
		.sink0_data          (cmd_demux_src11_data),                                          //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                                    //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_cmd_mux cmd_mux_012 (
		.clk                 (altpll_sys_c2_clk),                                             //       clk.clk
		.reset               (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                         //          .valid
		.src_data            (cmd_mux_012_src_data),                                          //          .data
		.src_channel         (cmd_mux_012_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                                         //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                                         //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                                       //          .channel
		.sink0_data          (cmd_demux_src12_data),                                          //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)                                    //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                          //      sink.ready
		.sink_channel       (router_001_src_channel),                                        //          .channel
		.sink_data          (router_001_src_data),                                           //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_001_src_valid),                                          //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                          //          .valid
		.src0_data          (rsp_demux_src0_data),                                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                     //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                          //      sink.ready
		.sink_channel       (router_002_src_channel),                                        //          .channel
		.sink_data          (router_002_src_data),                                           //          .data
		.sink_startofpacket (router_002_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_002_src_valid),                                          //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                 //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                          //      sink.ready
		.sink_channel       (router_003_src_channel),                                        //          .channel
		.sink_data          (router_003_src_data),                                           //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_003_src_valid),                                          //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                                 //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_rsp_demux rsp_demux_003 (
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                          //      sink.ready
		.sink_channel       (router_004_src_channel),                                        //          .channel
		.sink_data          (router_004_src_data),                                           //          .data
		.sink_startofpacket (router_004_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_004_src_valid),                                          //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                                 //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_rsp_demux rsp_demux_004 (
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                          //      sink.ready
		.sink_channel       (router_005_src_channel),                                        //          .channel
		.sink_data          (router_005_src_data),                                           //          .data
		.sink_startofpacket (router_005_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_005_src_valid),                                          //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                                 //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_rsp_demux rsp_demux_005 (
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                          //      sink.ready
		.sink_channel       (router_006_src_channel),                                        //          .channel
		.sink_data          (router_006_src_data),                                           //          .data
		.sink_startofpacket (router_006_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_006_src_valid),                                          //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                                 //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_rsp_demux rsp_demux_006 (
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                          //      sink.ready
		.sink_channel       (router_007_src_channel),                                        //          .channel
		.sink_data          (router_007_src_data),                                           //          .data
		.sink_startofpacket (router_007_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_007_src_valid),                                          //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                                 //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_rsp_demux rsp_demux_007 (
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                          //      sink.ready
		.sink_channel       (router_008_src_channel),                                        //          .channel
		.sink_data          (router_008_src_data),                                           //          .data
		.sink_startofpacket (router_008_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_008_src_valid),                                          //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                                 //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_rsp_demux rsp_demux_008 (
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                          //      sink.ready
		.sink_channel       (router_009_src_channel),                                        //          .channel
		.sink_data          (router_009_src_data),                                           //          .data
		.sink_startofpacket (router_009_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_009_src_valid),                                          //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                                 //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_rsp_demux rsp_demux_009 (
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                          //      sink.ready
		.sink_channel       (router_010_src_channel),                                        //          .channel
		.sink_data          (router_010_src_data),                                           //          .data
		.sink_startofpacket (router_010_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_010_src_valid),                                          //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_009_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                                 //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_rsp_demux rsp_demux_010 (
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                          //      sink.ready
		.sink_channel       (router_011_src_channel),                                        //          .channel
		.sink_data          (router_011_src_data),                                           //          .data
		.sink_startofpacket (router_011_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_011_src_valid),                                          //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_010_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                                 //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_rsp_demux rsp_demux_011 (
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                          //      sink.ready
		.sink_channel       (router_012_src_channel),                                        //          .channel
		.sink_data          (router_012_src_data),                                           //          .data
		.sink_startofpacket (router_012_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_012_src_valid),                                          //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_011_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                                 //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_rsp_demux rsp_demux_012 (
		.clk                (altpll_sys_c2_clk),                                             //       clk.clk
		.reset              (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                                          //      sink.ready
		.sink_channel       (router_013_src_channel),                                        //          .channel
		.sink_data          (router_013_src_data),                                           //          .data
		.sink_startofpacket (router_013_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_013_src_valid),                                          //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_012_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                                 //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                  (altpll_sys_c2_clk),                                             //       clk.clk
		.reset                (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                             //       src.ready
		.src_valid            (rsp_mux_src_valid),                                             //          .valid
		.src_data             (rsp_mux_src_data),                                              //          .data
		.src_channel          (rsp_mux_src_channel),                                           //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                       //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                          //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                          //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                        //          .channel
		.sink0_data           (rsp_demux_src0_data),                                           //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                                    //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                      //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                      //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                    //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                       //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                              //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                      //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                      //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                    //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                       //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                              //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                      //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                      //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                    //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                       //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                              //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                      //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                      //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                    //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                       //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                              //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                      //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                      //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                    //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                       //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                              //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                      //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                      //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                    //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                       //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                              //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                      //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                      //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                    //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                       //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                              //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                      //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                      //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                    //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                       //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                              //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                      //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                      //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                    //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                       //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                              //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                      //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                      //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                    //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                       //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                              //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                      //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                      //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                    //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                       //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                              //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                                //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                                      //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                                      //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                                    //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                                       //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                              //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket)                                 //          .endofpacket
	);

	DE0_nano_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (altpll_sys_c2_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sysid_qsys_control_slave_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                  //         .error
	);

	DE0_nano_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (altpll_sys_c2_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (epcs_epcs_control_port_agent_rdata_fifo_src_data),              //     in_0.data
		.in_0_valid     (epcs_epcs_control_port_agent_rdata_fifo_src_valid),             //         .valid
		.in_0_ready     (epcs_epcs_control_port_agent_rdata_fifo_src_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                              //         .error
	);

	DE0_nano_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (altpll_sys_c2_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_s1_agent_rdata_fifo_src_data),                            //     in_0.data
		.in_0_valid     (timer_s1_agent_rdata_fifo_src_valid),                           //         .valid
		.in_0_ready     (timer_s1_agent_rdata_fifo_src_ready),                           //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                              //         .error
	);

	DE0_nano_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (altpll_sys_c2_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_leds_s1_agent_rdata_fifo_src_data),                         //     in_0.data
		.in_0_valid     (pio_leds_s1_agent_rdata_fifo_src_valid),                        //         .valid
		.in_0_ready     (pio_leds_s1_agent_rdata_fifo_src_ready),                        //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                              //         .error
	);

	DE0_nano_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (altpll_sys_c2_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_key_s1_agent_rdata_fifo_src_data),                          //     in_0.data
		.in_0_valid     (pio_key_s1_agent_rdata_fifo_src_valid),                         //         .valid
		.in_0_ready     (pio_key_s1_agent_rdata_fifo_src_ready),                         //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                              //         .error
	);

	DE0_nano_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (altpll_sys_c2_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_switch_s1_agent_rdata_fifo_src_data),                       //     in_0.data
		.in_0_valid     (pio_switch_s1_agent_rdata_fifo_src_valid),                      //         .valid
		.in_0_ready     (pio_switch_s1_agent_rdata_fifo_src_ready),                      //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                              //         .error
	);

	DE0_nano_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (altpll_sys_c2_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (g_sensor_int_s1_agent_rdata_fifo_src_data),                     //     in_0.data
		.in_0_valid     (g_sensor_int_s1_agent_rdata_fifo_src_valid),                    //         .valid
		.in_0_ready     (g_sensor_int_s1_agent_rdata_fifo_src_ready),                    //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                              //         .error
	);

	DE0_nano_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (altpll_sys_c2_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (i2c_sda_s1_agent_rdata_fifo_src_data),                          //     in_0.data
		.in_0_valid     (i2c_sda_s1_agent_rdata_fifo_src_valid),                         //         .valid
		.in_0_ready     (i2c_sda_s1_agent_rdata_fifo_src_ready),                         //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                              //         .error
	);

	DE0_nano_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (altpll_sys_c2_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (i2c_scl_s1_agent_rdata_fifo_src_data),                          //     in_0.data
		.in_0_valid     (i2c_scl_s1_agent_rdata_fifo_src_valid),                         //         .valid
		.in_0_ready     (i2c_scl_s1_agent_rdata_fifo_src_ready),                         //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                              //         .error
	);

	DE0_nano_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (altpll_sys_c2_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ext_sensor_int_s1_agent_rdata_fifo_src_data),                   //     in_0.data
		.in_0_valid     (ext_sensor_int_s1_agent_rdata_fifo_src_valid),                  //         .valid
		.in_0_ready     (ext_sensor_int_s1_agent_rdata_fifo_src_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                              //         .error
	);

	DE0_nano_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (altpll_sys_c2_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (i2c_ext_sda_s1_agent_rdata_fifo_src_data),                      //     in_0.data
		.in_0_valid     (i2c_ext_sda_s1_agent_rdata_fifo_src_valid),                     //         .valid
		.in_0_ready     (i2c_ext_sda_s1_agent_rdata_fifo_src_ready),                     //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                              //         .error
	);

	DE0_nano_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (altpll_sys_c2_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (xbee_uart_s1_agent_rdata_fifo_src_data),                        //     in_0.data
		.in_0_valid     (xbee_uart_s1_agent_rdata_fifo_src_valid),                       //         .valid
		.in_0_ready     (xbee_uart_s1_agent_rdata_fifo_src_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                              //         .error
	);

	DE0_nano_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (altpll_sys_c2_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (clock_crossing_bridge_IO_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (adc_spi_int_spi_control_port_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (adc_spi_int_spi_control_port_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (adc_spi_int_spi_control_port_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                              //         .error
	);

endmodule
